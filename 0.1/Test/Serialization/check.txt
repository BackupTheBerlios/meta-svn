"
license='"
		Copyright (c) 2005 Christian Staudenmeyer
		
		Permission is hereby granted, free of charge, to any person obtaining
		a copy of this software and associated documentation files (the
		"Software"), to deal in the Software without restriction, including
		without limitation the rights to use, copy, modify, merge, publish,
		distribute, sublicense, and/or sell copies of the Software, and to
		permit persons to whom the Software is furnished to do so, subject to
		the following conditions:
		
		The above copyright notice and this permission notice shall be
		included in all copies or substantial portions of the Software.
		
		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
		NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
		BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
		ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
		CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE."'
|
	&=merge
		[1]=%
		[2]=
			[1]="AssignedToCurrent"
	scoping=
		test=
			scopingValue="right"
			function=
				select=
					[1]=
						search=
							literal="scopingValue"
	scopingValue="wrong"
	scopingTest=scoping.test
	lexicalScoping=scopingTest *
	unicodeText="äaba"
	%.%.testSubDir.x=*
	persistantDeleteTest=testSubDir.x
	%.%.testSubDir.x=
		a="b"
		x=
			x="hello"
			y="world"
	integerHashTest=
		[2]="correct hash content"
		hashTestData=
			[*]=
				[*]=*
		hashTest=[hashTestData]
	negativeInteger=100
	negativeInteger.x="hello"
	integerIncrementTest=5
	integerIncrementTest.[*]=integerIncrementTest
	integerDecrementTest=5
	integerDecrementTest=integerDecrementTest.[*]
	negativeNumber=-123
	mapNumbers=
		integer=
			[*]=5
		negative=
			[*]=5
			negative=*
		fraction=
			[*]=5
			denominator=7
		negativeFraction=
			[*]=5
			negative=*
			denominator=7
	fraction=3/2
	persistenceTest=testSubDir
	literalEscapeTest=
		[1]="asdf"
		[2]="asdf"
		[3]=''"as"'df"''
		[4]='''"as"''df"'''
		[5]='''''''''''''''''"as"''''''''''''''''df"'''''''''''''''''
	[1]="ImpliedAutokey"
	[2]="Autokey"
	commandLineArguments=@
	aMap=
		a="a"
	[aMap]="Object"
	["normal symbol"]="NormalSymbol"
	lookupSymbol="LookupSymbol"
	["long key symbol"]="LookupExtendedSymbol"
	lookedUpMap=[aMap]
	lookedUpNormalSymbol=["normal symbol"]
	lookedUpSymbol=lookupSymbol
	lookedUpLongSymbol=["long key symbol"]
	object=
		a="default"
		autoSearch="default"
		b=*
		SetA=
			function=
				program=
					[1]=
						key=
							[1]=
								scope=*
							[2]=
								scope=*
							[3]=
								lookup=
									literal="a"
						value=
							literal="c"
					[2]=
						key=
							[1]=
								scope=*
							[2]=
								scope=*
							[3]=
								lookup=
									literal="autoSearch"
						value=
							literal="changed"
		SetB=
			function=
				program=
					[1]=
						key=
							[1]=
								scope=*
							[2]=
								scope=*
							[3]=
								lookup=
									literal="b"
							[4]=
								lookup=
									literal=1
						value=
							select=
								[1]=
									argument=*
								[2]=
									lookup=
										literal="value"
					[2]=
						key=
							[1]=
								current=*
						value=
							literal="changed"
		x=
			a="b"
			c="d"
		[1]=
			function=
				program=
					[1]=
						key=
							[1]=
								current=*
							[2]=
								lookup=
									literal="a"
						value=
							literal="b"
	a="default"
	b=*
	aSet=object.SetA *
	bSet=object.SetB
		value=
			x=7
			z=1
	scopeTest="default"
	scopeFunction=
		inScope="right"
		function=
			program=
				[1]=
					key=
						[1]=
							scope=*
						[2]=
							scope=*
						[3]=
							lookup=
								literal="scopeTest"
					value=
						select=
							[1]=
								search=
									literal="inScope"
	inScope="wrong"
	[3]=scopeFunction *
	scopeFromFunctionData="wrong"
	scopeFunctionFunction=
		scopeFromFunctionData="right"
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="function"
					value=
						literal=
							select=
								[1]=
									search=
										literal="scopeFromFunctionData"
	scopeFromFunction=scopeFunctionFunction *
	scopeFromFunctionTest=scopeFromFunction *
	ReturnEverything=
		function=
			program=
				[1]=
					key=
						[1]=
							current=*
					value=
						select=
							[1]=
								argument=*
	everythingReturned=ReturnEverything
		[1]="a"
		[2]="b"
		[3]="c"
	variableAsArgument=ReturnEverything
		[1]="x"
		[2]="y"
		[3]="z"
	ReturnFunction=
		function=
			program=
				[1]=
					key=
						[1]=
							current=*
					value=
						program=
							[1]=
								key=
									[1]=
										lookup=
											literal="function"
								value=
									literal=
										program=
											[1]=
												key=
													[1]=
														current=*
												value=
													program=
														[1]=
															value=
																literal=1
															key=
																[1]=
																	lookup=
																		literal=1
														[2]=
															value=
																literal=2
															key=
																[1]=
																	lookup=
																		literal=2
														[3]=
															value=
																literal=3
															key=
																[1]=
																	lookup=
																		literal=3
	SetCurrent=
		function=
			program=
				[1]=
					key=
						[1]=
							current=*
					value=
						program=
							[1]=
								key=
									[1]=
										lookup=
											literal="asdf"
								value=
									select=
										[1]=
											argument=*
							[2]=
								key=
									[1]=
										lookup=
											literal="x"
								value=
									select=
										[1]=
											argument=*
										[2]=
											lookup=
												literal="symbol"
				[2]=
					key=
						[1]=
							current=*
					value=
						select=
							[1]=
								search=
									literal="x"
	thisSet=SetCurrent
		symbol="haha"
	FirstLevel=
		function=
			program=
				[1]=
					value=
						call=
							callable=
								select=
									[1]=
										search=
											literal="SecondLevel"
							parameter=
								select=
									[1]=
										argument=*
					key=
						[1]=
							lookup=
								literal=1
	SecondLevel=
		function=
			select=
				[1]=
					argument=*
	argTest=FirstLevel
		a="z"
	TestClass=Meta.TestClass
	TestClass.NestedClass.field=5
	nestedClassTest=TestClass.NestedClass.field
	testClass=TestClass *
	testClass.floatValue=3
	testClass.doubleValue=4
	testClass.decimalValue=5
	TestClass.boolTest=1
	boolTest=TestClass.boolTest
	strongNameTest=[
		version="2.0.0.0"
		publicKeyToken="b77a5c561934e089"
		culture="Neutral"
		name="mscorlib"
	].Int32
	MemberTest=Meta.MemberTest
	memberTest=MemberTest *
	stringOverload=MemberTest.OverloadedMethod.[mscorlib.String] "hello"
	integerOverload=MemberTest.OverloadedMethod.[mscorlib.Int32] 5
	memberTestOverload=MemberTest.OverloadedMethod.[
		[1]=Meta.MemberTest
		[2]=mscorlib.Int32
	]
		[1]=memberTest
		[2]=3247
	memberTestOverload=MemberTest.OverloadedMethod.[
		[1]=Meta.MemberTest
		[2]=mscorlib.Int32
	]
		[1]=memberTest
		[2]=3247
	MemberTest.classField="a"
	memberTest.instanceField="b"
	[4]=MemberTest.ClassProperty.set memberTest.InstanceProperty.get *
	classPropertyValue=MemberTest.ClassProperty.get *
	[5]=memberTest.InstanceProperty.set MemberTest.ClassProperty.get *
	instancePropertyValue=memberTest.InstanceProperty.get *
	interceptedSymbol="/hello/"
	positionalNoConversion=Meta.PositionalNoConversion
		[1]="m"
		[2]="n"
		[3]="o"
	positionalNoConversionConcatenated=positionalNoConversion.Concatenate
		[1]="r"
		[2]="s"
		[3]="t"
	namedNoConversion=Meta.NamedNoConversion
		[1]="m"
		y="n"
	namedNoConversionConcatenated=namedNoConversion.Concatenate
		c="t"
		[1]="r"
	indexerNoConversion=Meta.IndexerNoConversion *
	[6]=indexerNoConversion.Item.set
		[1]="abc"
		[2]="hihi"
	indexerNoConversionIndexed=indexerNoConversion.Item.get "abc"
	interceptedSymbolTwo=1
	k="hello"
	xyz="w"
	literalFunction=
		function=
			literal=5
	literalFunctionResult=literalFunction *
	someFunction=
		function=
			program=
				[1]=
					key=
						[1]=
							current=*
					value=
						literal="simple function this"
	callFunction=
		function=
			select=
				[1]=
					search=
						literal="someFunction"
	callFunctionResult=callFunction *
	delayedFunction=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="function"
					value=
						literal=
							program=
								[1]=
									key=
										[1]=
											lookup=
												literal="x"
									value=
										literal="y"
	delayedFunctionResult=delayedFunction *
	value="xyz"
	selectionFunction=
		function=
			select=
				[1]=
					search=
						literal="value"
	selectionFunctionResult=selectionFunction *
	upperLevel="unchanged"
	SetUpperLevel=
		function=
			program=
				[1]=
					key=
						[1]=
							scope=*
						[2]=
							scope=*
						[3]=
							lookup=
								literal="upperLevel"
					value=
						select=
							[1]=
								argument=*
	ChangeUpperLevel=
		function=
			program=
				[1]=
					value=
						call=
							callable=
								select=
									[1]=
										search=
											literal="SetUpperLevel"
							parameter=
								literal="changed"
					key=
						[1]=
							lookup=
								literal=1
	[7]=ChangeUpperLevel *
	staticEventChanged=*
	ChangeStaticEvent=
		function=
			program=
				[1]=
					key=
						[1]=
							scope=*
						[2]=
							scope=*
						[3]=
							lookup=
								literal="staticEventChanged"
					value=
						select=
							[1]=
								argument=*
	[8]=TestClass.staticEvent.add
		function=
			program=
				[1]=
					value=
						call=
							callable=
								select=
									[1]=
										search=
											literal="ChangeStaticEvent"
							parameter=
								literal=1
					key=
						[1]=
							lookup=
								literal=1
				[2]=
					key=
						[1]=
							current=*
					value=
						select=
							[1]=
								argument=*
							[2]=
								lookup=
									literal=1
	staticEvent=TestClass.staticEvent
	[9]=TestClass.TakeDelegate
		function=
			select=
				[1]=
					argument=*
				[2]=
					lookup=
						literal=1
	resultFromDelegate=TestClass.GetResultFromDelegate *
	staticEventResult=TestClass.staticEvent testClass
	instanceEventChanged=*
	[10]=testClass.instanceEvent.add
		function=
			program=
				[1]=
					key=
						[1]=
							scope=*
						[2]=
							scope=*
						[3]=
							scope=*
						[4]=
							lookup=
								literal="instanceEventChanged"
					value=
						literal=1
				[2]=
					key=
						[1]=
							current=*
					value=
						select=
							[1]=
								argument=*
							[2]=
								lookup=
									literal=1
	instanceEvent=testClass.instanceEvent
	instanceEventResult=testClass.instanceEvent 5
	one=1
	two=2
	firstIf="unchanged"
	secondIf="unchanged"
	firstIfCondition=equal
		[1]=1
		[2]=one
	firstIfBranches=
		[1]=
			function=
				literal="then"
		[*]=
			function=
				literal="else"
	firstIf=firstIfBranches.[firstIfCondition] *
	bigNumber=50020202
	secondSwitch="unchanged"
	secondSwitchCases=
		[1]="one"
		[2]="two"
		[3]="three"
	secondSwitch=secondSwitchCases.[3]
	emptyMap=*
	emptyFunction=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="x"
					value=
						literal="hello"
	emptyFunctionResult=emptyFunction *
	font=["System.Drawing"].Font.[
		[1]=mscorlib.String
		[2]=mscorlib.Single
	]
		[1]="Courier New"
		[2]=10
	decimalTest=5
	fractionTest=40
	stringTest="hello"
	stringTest.[6]=stringTest.[1]
	helloh="hi"
	stringStrategyHashTest=[stringTest]
	x=
		aLongText="
						hello world!
						hello!
						"
	arrayList=mscorlib.ArrayList.[*] *
	[11]=arrayList.Add "hello"
	arrayListResult=arrayList.Item.get *
	textBox=["System.Windows.Forms"].TextBox *
	[12]=textBox.Text.set "
				Alle meine Entchen,
				schwimmen auf dem See,
				schwimmen auf dem See,
				Köpfchen in das Wasser,
				Schwaenzchen in die Hoeh."
	lines=textBox.Lines.get *
	alleMeineText=lines.GetValue.[mscorlib.Int32] 1
	form=["System.Windows.Forms"].Form *
	[13]=form.Location.set.[["System.Drawing"].Point]
		X=5
		Y=1000
	automaticConversionTest=form.Location.get.[*] *
	tabText="			hello"
	escapedText="'#'n'''t"
	whileCounter=*
	loop=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="whileDecision"
					value=
						call=
							callable=
								select=
									[1]=
										search=
											literal="not"
							parameter=
								call=
									callable=
										select=
											[1]=
												search=
													literal="equal"
									parameter=
										program=
											[1]=
												value=
													select=
														[1]=
															argument=*
												key=
													[1]=
														lookup=
															literal=1
											[2]=
												value=
													literal=10
												key=
													[1]=
														lookup=
															literal=2
				[2]=
					key=
						[1]=
							lookup=
								literal="whileBranches"
					value=
						program=
							[1]=
								value=
									program=
										[1]=
											key=
												[1]=
													lookup=
														literal="function"
											value=
												literal=
													call=
														callable=
															select=
																[1]=
																	search=
																		literal="loop"
														parameter=
															call=
																callable=
																	select=
																		[1]=
																			search=
																				literal="add"
																parameter=
																	program=
																		[1]=
																			value=
																				select=
																					[1]=
																						argument=*
																			key=
																				[1]=
																					lookup=
																						literal=1
																		[2]=
																			value=
																				literal=1
																			key=
																				[1]=
																					lookup=
																						literal=2
								key=
									[1]=
										lookup=
											literal=1
							[2]=
								key=
									[1]=
										lookup=
											literal=*
								value=
									program=
										[1]=
											key=
												[1]=
													lookup=
														literal="function"
											value=
												literal=
													select=
														[1]=
															argument=*
				[3]=
					key=
						[1]=
							current=*
					value=
						call=
							callable=
								select=
									[1]=
										search=
											literal="whileBranches"
									[2]=
										lookup=
											select=
												[1]=
													search=
														literal="whileDecision"
							parameter=
								select=
									[1]=
										argument=*
	whileCounter=loop 3
	returnInMap=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="result"
					value=
						select=
							[1]=
								argument=*
	literalAsArgument=returnInMap 1
	returnFunction=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="function"
					value=
						literal=
							literal="functionResult"
	returnArg=
		function=
			select=
				[1]=
					argument=*
	myArg=
		function=
			program=
				[1]=
					key=
						[1]=
							lookup=
								literal="hello"
					value=
						literal="world"
	funcReturnTest=returnArg myArg *
	documentedFunction=
		doc="This function returns #hello ."
		function=
			literal="hello"
	docFunctionResult=documentedFunction *
"
