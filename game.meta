(){
	&map.merge([System,mscorlib,OdeDotNet,PresentationCore,PresentationFramework,WindowsBase,flow,boolean,map,rational]);
	
	random=Meta.Library.Random_Int32_Int32;
	range=Meta.Library.Range_Num;
	vectorLength=(vector)rational.power(rational.add(rational.power(vector.1,2),rational.power(vector.2,2)),1/2);
	vectorDifference=(a,b)flow.apply((key)rational.subtract(a.<key>,b.<key>),map.keys(a));
	compareNumber=Meta.Library.CompareNumber_Num_Num;
	sort=Meta.Library.Sort_Map_Map;
	with=Meta.Library.With_Map_Map;
	enumerableToArray=Meta.Library.EnumerableToArray_Map;
	
	uncurry=(func)(arg){
		result=func;
		apply(
			(a){
				result:result(a);
			},
			arg
		);
		&result;
	};

		
	makeVector=uncurry(Vector3_Single_Single_Single);
	world=World();
	space=with(
		Space_SpaceType(SpaceType.HashSpace),
		{
			Collision=(,e){
				a=e.get_Geom1();
				b=e.get_Geom2();
				flow.apply(
					(contactGeom){
						contact=world.CreateContactJoint_Contact_JointGroup(
							Contact({Geom=contactGeom;}),
							contactGroup
						);
						contact.Attach_Body_Body(a.get_Body(),b.get_Body());
					},
					enumerableToArray(a.Collide_Geom_Int32(b,13))
				);
			};
		}
	);
	points=0;
	canvas=Canvas();
	flow.apply(
		(stuff){
			position=stuff.2;
			size=stuff.1;
			box=space.CreateBox_Single_Single_Single(size.1,size.2,size.3);
			box.set_Position_Vector3(makeVector(position));
			canvas.get_Children().Add_UIElement(Rectangle({
				Canvas.LeftProperty=subtract(position.1,divide(size.1,2));
				Canvas.TopProperty=subtract(position.2,divide(size.2,2));
				Height=size.2;
				Width=size.1;
				Fill=Brushes.get_Green();				
			}));
		},
		[
			[[798,50,100],[400,0,0]],
			[[100,100,100],[200,200,0]],
			[[798,50,100],[400,600,0]],
			[[50,598,100],[0,300,0]],
			[[50,598,100],[800,300,0]]
		]
	);
	points=0;
	label=Label();
	bubble=(size){
		body=with(
			Body_World(world),
			{
				Mass=Mass.Sphere_Single_Single(rational.multiply(size,size),1);
				Position=makeVector([random(1,790),random(1,590),0]);
				LinearVel=makeVector([random(-6,6),random(-6,6),0]);
			}
		);
		radius=rational.multiply(size,4);
		geom=with(
			space.CreateSphere_Single(radius),
			{
				Position=body.get_Position();
				Body=body;
			}
		);
		GetPosition=(){
			pos=body.get_Position();
			&[pos.get_X(),pos.get_Y(),pos.get_Z()];
		};
		ellipse=Ellipse({
			Width=rational.multiply(2,radius);
			Height=rational.multiply(2,radius);
			Fill=Brushes.get_Red();
			Canvas.LeftProperty=GetPosition().1;
			Canvas.TopProperty=GetPosition().2;
		});
		canvas.get_Children().Add_UIElement(ellipse);
	};
	jointGroup=JointGroup_Int32(0);
	currentBubble=0;
	line=Line({
		Canvas.LeftProperty=0;
		Canvas.RightProperty=0;
		Stroke=Brushes.get_Black();
		StrokeThickness=2;
		Visibility=Visibility.Hidden;
	});
	paused=0;
	contactGroup=JointGroup_Int32(0);
	bubbles=apply(()bubble(random(1,5)),range(30));
	p={
		&bubble(1);
		ellipse.set_Fill_Brush(Brushes.get_Green());
	};
	canvas.get_Children().Add_UIElement(line);
	canvas.get_Children().Add_UIElement(label);
	timer=with(
		DispatcherTimer_DispatcherPriority(DispatcherPriority.Normal),
		{
			Interval=TimeSpan_Int64(100000);
			Tick=()(){
				contactGroup.Empty();
				space.CheckCollisions();
				world.Step();
				flow.apply(
					(a){
						pos=a.GetPosition();
						Canvas.SetLeft_UIElement_Double(a.ellipse,rational.subtract(pos.1,a.radius));
						Canvas.SetTop_UIElement_Double(a.ellipse,rational.subtract(pos.2,a.radius));
					},
					array.join([bubbles,[p]])
				);
				label.set_Content_Object(map.toString(points));
				if(
					not(equal(0,currentBubble)),
					(){
						pos1=currentBubble.GetPosition();
						pos2=p.GetPosition();
						with(
							line,
							{
								X1=pos1.1;
								Y1=pos1.2;
								X2=pos2.1;
								Y2=pos2.2;
							}
						);
					}
				);
			};
		}
	);
	Application().Run_Window(
		Window({
			Content=canvas;
			Loaded=()()timer.Start();
			Title="Bubblemania";
			Width=800;
			Height=620;
			Background=Brushes.get_Yellow();
			KeyUp=()(e)flow.if(
				map.equal(e.get_Key(),Key.Enter),
				(){
					jointGroup.Empty();
					currentBubble:0;
					line.set_Visibility_Visibility(Visibility.Hidden);
				}
			);
			KeyDown=()(e){
				if(
					and(equal(e.get_Key(),Key.Enter),equal(currentBubble,0)),
					(){
						lengths=flow.apply(
							(b)vectorLength(vectorDifference(p.GetPosition(),b.GetPosition())),
							bubbles
						);
						bubble=bubbles.<sort(map.keys(bubbles),(a,b)compareNumber(lengths.<a>,lengths.<b>)).1>;
		
						joint=HingeJoint_World_JointGroup(world,jointGroup);
						joint.Attach_Body_Body(bubble.body,p.body);
						joint.set_Anchor_Vector3(bubble.body.get_Position());
		
						currentBubble:bubble;
						line.set_Visibility_Visibility(Visibility.Visible);
					}
				);
			};
		})
	);
}