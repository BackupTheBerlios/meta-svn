=
	license
	"
		Copyright (c) 2005, 2006 Christian Staudenmeyer
		
		Permission is hereby granted, free of charge, to any person obtaining
		a copy of this software and associated documentation files (the
		"Software"), to deal in the Software without restriction, including
		without limitation the rights to use, copy, modify, merge, publish,
		distribute, sublicense, and/or sell copies of the Software, and to
		permit persons to whom the Software is furnished to do so, subject to
		the following conditions:
		
		The above copyright notice and this permission notice shall be
		included in all copies or substantial portions of the Software.
		
		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
		NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
		BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
		ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
		CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	"
=
	shortFunc
	"
		,
			|
				arg
				!arg
	"
|
	commandLine
	,
		=
			:
			*
				*
					!merge
					,
						=
							.
							"AssignedToCurrent"
				0
		=
			asdf
			"hello"
		=
			shortFunction
			,
				|
					arg
					!asdf
		=
			shortFunctionTest
			*
				!shortFunction
				"hello"
		=
			counter
			0
		=
			SetCounter
			,
				|
					argument
					,
						=
							!counter
							@
		=
			.
			*
				!SetCounter
				5
		=
			scoping
			,
				=
					test
					,
						=
							scopingValue
							"right"
						|
							arg
							!scopingValue
		=
			scopingValue
			"wrong"
		=
			scopingTest
			$
				!scoping
				test
		=
			lexicalScoping
			*
				!scopingTest
				0
		=
			$
				!<"C:"
				hello
			,
				=
					x
					"someTest"
		=
			cTest
			$
				!<"C:"
				hello
		=
			$
				!<"C:"
				hello
			0
		=
			cTest2
			$
				!<"C:"
				hello
		=
			unicodeText
			"äaba"
		=
			$
				!testSubDir
				x
			0
		=
			persistantDeleteTest
			$
				!testSubDir
				x
		=
			$
				!testSubDir
				x
			,
				=
					a
					"b"
				=
					x
					,
						=
							x
							"hello"
						=
							y
							"world"
		=
			$
				!testSubDir
				x
				a
			"hi"
		=
			integerHashTest
			,
				=
					<2
					"correct hash content"
				=
					hashTestData
					,
						=
							<0
							,
								=
									<0
									0
				=
					hashTest
					!<!hashTestData
		=
			negativeInteger
			100
		=
			$
				negativeInteger
				x
			"hello"
		=
			integerIncrementTest
			5
		=
			$
				integerIncrementTest
				<0
			!integerIncrementTest
		=
			integerDecrementTest
			5
		=
			integerDecrementTest
			$
				!integerDecrementTest
				<0
		=
			negativeNumber
			-123
		=
			mapNumbers
			,
				=
					integer
					,
						=
							<0
							5
				=
					negative
					,
						=
							<0
							5
						=
							negative
							0
				=
					fraction
					,
						=
							<0
							5
						=
							denominator
							7
				=
					negativeFraction
					,
						=
							<0
							5
						=
							negative
							0
						=
							denominator
							7
		=
			fraction
			3/2
		=
			persistenceTest
			$
				!testSubDir
				x
		=
			literalEscapeTest
			,
				=
					.
					"asdf"
				=
					.
					"asdf"
				=
					.
					"
						as"'df
					"
				=
					.
					"
						as"''df
					"
				=
					.
					"
						as"''''''''''''''''df
					"
		=
			.
			"ImpliedAutokey"
		=
			.
			"Autokey"
		=
			commandLineArguments
			!commandLine
		=
			aMap
			,
				=
					a
					"a"
		=
			<!aMap
			"Object"
		=
			<"normal symbol"
			"NormalSymbol"
		=
			lookupSymbol
			"LookupSymbol"
		=
			<"long key symbol"
			"LookupExtendedSymbol"
		=
			lookedUpMap
			!<!aMap
		=
			lookedUpNormalSymbol
			!<"normal symbol"
		=
			lookedUpSymbol
			!lookupSymbol
		=
			lookedUpLongSymbol
			!<"long key symbol"
		=
			object
			,
				=
					a
					"default"
				=
					autoSearch
					"default"
				=
					b
					0
				=
					SetA
					,
						|
							arg
							,
								=
									!a
									"c"
								=
									!autoSearch
									"changed"
				=
					SetB
					,
						|
							newB
							,
								=
									$
										!b
										<1
									$
										!newB
										value
								=
									:
									"changed"
				=
					x
					,
						=
							a
							"b"
						=
							c
							"d"
				=
					.
					,
						|
							arg
							,
								=
									$
										:
										a
									"b"
		=
			a
			"default"
		=
			b
			0
		=
			aSet
			*
				$
					!object
					SetA
				0
		=
			bSet
			*
				$
					!object
					SetB
				,
					=
						value
						,
							=
								x
								7
							=
								z
								1
		=
			scopeTest
			"default"
		=
			scopeFunction
			,
				=
					inScope
					"right"
				|
					arg
					,
						=
							!scopeTest
							!inScope
		=
			inScope
			"wrong"
		=
			.
			*
				!scopeFunction
				0
		=
			scopeFromFunctionData
			"wrong"
		=
			scopeFunctionFunction
			,
				=
					scopeFromFunctionData
					"right"
				|
					arg
					,
						|
							arg
							!scopeFromFunctionData
		=
			scopeFromFunction
			*
				!scopeFunctionFunction
				0
		=
			scopeFromFunctionTest
			*
				!scopeFromFunction
				0
		=
			ReturnEverything
			,
				|
					everything
					,
						=
							:
							!everything
		=
			everythingReturned
			*
				!ReturnEverything
				,
					=
						.
						"a"
					=
						.
						"b"
					=
						.
						"c"
		=
			variableAsArgument
			*
				!ReturnEverything
				,
					=
						.
						"x"
					=
						.
						"y"
					=
						.
						"z"
		=
			ReturnFunction
			,
				|
					arg
					,
						=
							:
							,
								|
									arg
									,
										=
											:
											,
												=
													.
													1
												=
													.
													2
												=
													.
													3
		=
			SetCurrent
			,
				|
					current
					,
						=
							:
							,
								=
									asdf
									!current
								=
									x
									$
										!current
										symbol
						=
							:
							!x
		=
			thisSet
			*
				!SetCurrent
				,
					=
						symbol
						"haha"
		=
			FirstLevel
			,
				|
					arg
					,
						=
							.
							*
								!SecondLevel
								!arg
		=
			SecondLevel
			,
				|
					arg
					!arg
		=
			argTest
			*
				!FirstLevel
				,
					=
						a
						"z"
		=
			TestClass
			$
				/
				Meta
				TestClass
		=
			$
				TestClass
				NestedClass
				field
			5
		=
			nestedClassTest
			$
				!TestClass
				NestedClass
				field
		=
			testClass
			*
				!TestClass
				0
		=
			$
				testClass
				floatValue
			3
		=
			$
				testClass
				doubleValue
			4
		=
			$
				testClass
				decimalValue
			5
		=
			$
				TestClass
				boolTest 
			1
		=
			boolTest
			$
				!TestClass
				boolTest
		=
			strongNameTest
			$
				!<,
					=
						version
						"2.0.0.0"
					=
						publicKeyToken
						"b77a5c561934e089"
					=
						culture
						"Neutral"
					=
						name
						"mscorlib"
				Int32
		=
			MemberTest
			$
				/
				Meta
				MemberTest
		=
			memberTest
			*
				!MemberTest
				0
		=
			stringOverload
			*
				$
					!MemberTest
					OverloadedMethod
					<$
						/
						mscorlib
						String
				"hello"
		=
			integerOverload
			*
				$
					!MemberTest
					OverloadedMethod
					<$
						/
						mscorlib
						Int32
				5
		=
			memberTestOverload
			*
				$
					!MemberTest
					OverloadedMethod
					<$
						/
						Meta
						MemberTest
					<$
						/
						mscorlib
						Int32
				!memberTest
				3247
		=
			memberTestOverload
			*
				$
					!MemberTest
					OverloadedMethod
					<$
						/
						Meta
						MemberTest
					<$
						/
						mscorlib
						Int32
				!memberTest
				3247
		=
			$
				MemberTest
				classField
			"a"
		=
			$
				memberTest
				instanceField
			"b"
		=
			$
				MemberTest
				ClassProperty
			$
				!memberTest
				InstanceProperty
		=
			classPropertyValue
			$
				!MemberTest
				ClassProperty
		=
			$
				memberTest
				InstanceProperty
			$
				!MemberTest
				ClassProperty
		=
			instancePropertyValue
			$
				!memberTest
				InstanceProperty
		=
			interceptedSymbol
			"/hello/"
		=
			positionalNoConversion
			*
				$
					/
					Meta
					PositionalNoConversion
					<$
						!mscorlib
						String
					<$
						!mscorlib
						String
					<$
						!mscorlib
						String
				"m"
				"n"
				"o"
		=
			positionalNoConversionConcatenated
			*
				$
					!positionalNoConversion
					Concatenate
					<$
						!mscorlib
						String
					<$
						!mscorlib
						String
					<$
						!mscorlib
						String
				"r"
				"s"
				"t"
		=
			namedNoConversion
			*
				$
					/
					Meta
					NamedNoConversion
					<$
						/
						Meta
						Map
				,
					=
						.
						"m"
					=
						y
						"n"
		=
			namedNoConversionConcatenated
			*
				$
					!namedNoConversion
					Concatenate
					<$
						/
						Meta
						Map
				,
					=
						c
						"t"
					=
						.
						"r"
		=
			indexerNoConversion
			*
				$
					/
					Meta
					IndexerNoConversion
				0
		=
			$
				indexerNoConversion
				Item
				abc
			"hihi"
		=
			indexerNoConversionIndexed
			$
				!indexerNoConversion
				Item
				<"abc"
		=
			interceptedSymbolTwo
			1
		=
			k
			"hello"
		=
			xyz
			"w"
		=
			literalFunction
			,
				|
					arg
					5
		=
			literalFunctionResult
			*
				!literalFunction
				0
		=
			someFunction
			,
				|
					arg
					,
						=
							:
							"simple function this"
		=
			callFunction
			,
				|
					arg
					!someFunction
		=
			callFunctionResult
			*
				!callFunction
				0
		=
			delayedFunction
			,
				|
					arg
					,
						|
							arg
							,
								=
									x
									"y"
		=
			delayedFunctionResult
			*
				!delayedFunction
				0
		=
			delayedFunctionDirect
			*
				*
					!delayedFunction
					0
				0
		=
			value
			"xyz"
		=
			selectionFunction
			,
				|
					arg
					!value
		=
			selectionFunctionResult
			*
				!selectionFunction
				0
		=
			upperLevel
			"unchanged"
		=
			SetUpperLevel
			,
				|
					arg
					,
						=
							!upperLevel
							!arg
		=
			ChangeUpperLevel
			,
				|
					arg
					,
						=
							.
							*
								!SetUpperLevel
								"changed"
		=
			.
			*
				!ChangeUpperLevel
				0
		=
			staticEventChanged
			0
		=
			ChangeStaticEvent
			,
				|
					arg
					,
						=
							!staticEventChanged
							!arg
		=
			$
				TestClass
				staticEvent
			,
				|
					arg
					,
						=
							.
							*
								!ChangeStaticEvent
								1
						=
							:
							$
								!arg
								<1
		=
			.
			*
				$
					!TestClass
					TakeDelegate
					<$
						/
						Meta
						TestClass
						TestDelegate
				,
					|
						arg
						$
							!arg
							<1
		=
			resultFromDelegate
			*
				$
					!TestClass
					GetResultFromDelegate
				0
		=
			staticEventResult
			*
				$
					!TestClass
					CallStaticEvent
					<$
						!mscorlib
						Object
				!testClass
		=
			instanceEventChanged
			0
		=
			$
				testClass
				instanceEvent
			,
				|
					arg
					,
						=
							!instanceEventChanged
							1
						=
							:
							$
								!arg
								<1
		=
			instanceEventResult
			*
				$
					!testClass
					CallInstanceEvent
					<$
						!mscorlib
						Object
				5
		=
			one
			1
		=
			two
			2
		=
			firstIf
			"unchanged"
		=
			secondIf
			"unchanged"
		=
			firstIfCondition
			*
				!equal
				1
				!one
		=
			firstIfBranches
			,
				=
					.
					,
						|
							arg
							"then"
				=
					<0
					,
						|
							arg
							"else"
		=
			firstIf
			*
				$
					!firstIfBranches
					<!firstIfCondition
				0
		=
			bigNumber
			50020202
		=
			secondSwitch
			"unchanged"
		=
			secondSwitchCases
			,
				=
					.
					"one"
				=
					.
					"two"
				=
					.
					"three"
		=
			secondSwitch
			$
				!secondSwitchCases
				<3
		=
			emptyMap
			0
		=
			emptyFunction
			,
				|
					arg
					,
						=
							x
							"hello"
		=
			emptyFunctionResult
			*
				!emptyFunction
				0
		=
			font
			*
				$
					/
					<"System.Drawing"
					Font
					<$
						/
						mscorlib
						String
					<$
						/
						mscorlib
						Single
				"Courier New"
				10
		=
			decimalTest
			5
		=
			fractionTest
			40
		=
			stringTest
			"hello"		
		=
			$
				stringTest
				<6
			$
				!stringTest
				<1
		=
			helloh
			"hi"
		=
			stringStrategyHashTest
			!<!stringTest
		=
			x
			,
				=
					aLongText
					"
						hello world!
						hello!
					"
		=
			arrayList
			*
				$
					/
					mscorlib
					ArrayList
				0
		=
			.
			*
				$
					!arrayList
					Add
					<$
						!mscorlib
						Object
				"hello"
		=
			arrayListResult
			$
				!arrayList
				Item
				<0
		=
			textBox
			*
				$
					/
					<"System.Windows.Forms"
					TextBox
				0
		=
			$
				textBox
				Text
			"
				Alle meine Entchen,
				schwimmen auf dem See,
				schwimmen auf dem See,
				Köpfchen in das Wasser,
				Schwaenzchen in die Hoeh.
			"
		=
			lines
			$
				!textBox
				Lines
		=
			alleMeineText
			*
				$
					!lines
					GetValue
					<$
						/
						mscorlib
						Int32
				1
		=
			form
			*
				$
					/
					<"System.Windows.Forms"
					Form
				0
		=
			$
				form
				Location
			*
				$
					!<"System.Drawing"
					Point
					<$
						/
						mscorlib
						Int32
					<$
						/
						mscorlib
						Int32
				5
				1000
		=
			automaticConversionTest
			$
				!form
				Location
		=
			tabText
			"			hello"
		=
			escapedText
			"'#'n'''t"
		=
			whileCounter
			0
		=
			loop
			,
				|
					start
					,
						=
							whileDecision
							*
								!not
								*
									!equal
									!start
									10
						=
							whileBranches
							,
								=
									.
									,
										|
											arg
											*
												!loop
												*
													!add
													!arg
													1
								=
									<0
									,
										|
											arg
											!arg
						=
							:
							*
								$
									!whileBranches
									<!whileDecision
								!start
		=
			whileCounter
			*
				!loop
				3
		=
			returnInMap
			,
				|
					arg
					,
						=
							result
							!arg
		=
			literalAsArgument
			*
				!returnInMap
				1
		=
			returnFunction
			,
				|
					arg
					,
						|
							arg
							"functionResult"
		=
			returnArg
			,
				|
					arg
					!arg
		=
			myArg
			,
				|
					arg
					,
						=
							hello
							"world"
		=
			funcReturnTest
			*
				!returnArg
				!myArg
				0
		=
			documentedFunction
			,
				=
					doc
					"This function returns #hello ."
				|
					arg
					"hello"
		=
			docFunctionResult
			*
				!documentedFunction
				0
		=
			topLevel
			"default"
		=
			deep
			,
				=
					map
					,
						=
							test
							,
								|
									arg
									,
										=
											!topLevel
											"changed"
		=
			.
			*
				$
					!deep
					map
					test
				0
		=
			outerFunction
			,
				|
					arg
					,
						=
							innerFunction
							,
								|
									arg
									,
										=
											:
											!arg
						=
							.
							*
								!innerFunction
								0
		=
			outerFunctionTest
			*
				!outerFunction
				"right"
		=
			newLines
			"
				
				
			"
		=
			$
				!<"System.Windows.Forms"
				Application
				VisualStyleState
			$
				!<"System.Windows.Forms"
				VisualStyleState
				ClientAreaEnabled
		=
			enumTest
			$
				!<"System.Windows.Forms"
				Application
				VisualStyleState
		=
			typeTest
			*
				$
					!mscorlib
					Array
					CreateInstance
					<$
						!mscorlib
						Type
					<$
						!mscorlib
						Int32
				$
					!mscorlib
					String
				5
		=
			123hello
			"asdf"
		=
			copySourceData
			,
				=
					x
					"y"
				=
					z
					"a"
		=
			copiedData
			!copySourceData
		=
			$
				copiedData
				x
			"changed"
		=
			characterLiterals
			,
				=
					a
					'a'
				=
					space
					' '
				=
					tab
					'	'