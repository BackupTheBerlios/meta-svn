|
	test
		booleanTest
			not
				true not 0
				false not 1
			and
				true and
					. 1
					. 1
					. 1
					. 1
				false and
					. 1
					. 0
					. 1
					. 1
			orTest
				true or
					. 1
					. 1
					. 1
				false or
					. 0
					. 0
					. 0
				otherTrue or
					. 0
					. 1
					. 0
					. 1
					. 0
		numberTest 
			positiveAdd add
				. 100
				. 1000
			negativeAdd add
				. -100
				. 91
			subtractTest add
				. 1/4
				. multiply
					. 1/100
					. -1
			subtractTest2 subtract
				. 103
				. 2
			divideTest divide
				. 103
				. 5
			multiplyInteger multiply
				. 19
				. 1023
			multiplyFraction multiply
				. 3/2
				. 7/3
			greater strictlyDecreasing
				. 4
				. 1
			nonincreasingTest decreasing
				. 1
				. 1
				. 0
				. 1
			nondecreasingTest increasing
				. 1
				. 2
				. 3
				. 4
				. 5
				. 6
			smaller strictlyIncreasing
				. 23
				. 2
			divide multiply
				. 1000
				. reciprocal 7
		bitwiseTest 
			or bitwiseOr
				. 8
				. 20
		mapTest 
			switchTest switch
				cases 
					x :"right"
					y :"wrong"
				control "x"				
			ifTest if
				. 1
				then :"if test successful"
			append append
				. "abc, "
				. "die Katze lief im Schnee."
			apply 
				current apply
					.
						. 1
						. 2
						. 3
					argument|add
						. argument
						. 1
			contains contains
				map 
					x "hello"
				key "x"
			keys keys
				jjqwv "aeäquq"
				oere "i ke"
				. "oiq"
			equal 
				map 
					true equal
						.
							x "hello"
							y "world"
						.
							x "hello"
							y "world"
					false equal
						.
							x "y"
							y "z"
						.
							x "y"
							y "a"
			while 
				counter 0
				SetCounter 
					argument|
						$counter argument
				test while
					. :strictlyIncreasing
						. counter
						. 10
					|SetCounter
						[0] counter
				current counter
			splitTest split
				. "hello world hello"
				space " "
				delimiters 
					. space.[1]
			stringSplitTest string.split
				. "hello world hello"
				space " "
				l "l"
				delimiters 
					. space.[1]
					. l.[1]
			tryTest try
				function 
					|"hello"
				catch 
					argument|argument.ToString 0
			sort sort
				argument|if
					. strictlyIncreasing
						. argument.[1].x
						. argument.[2].x
					then :-1
					else :if
						. strictlyDecreasing
							. argument.[1].x
							. argument.[2].x
						then :1
						else :0
				.
					.
						x 12
						y 234
					.
						x 123
						y 3245
					.
						x 12
						y 234
					.
						x 245
						y 98834
			integerToString integerToString 5
			stringReplace string.replace
				string "hello hello hi"
				old "he"
				new "i"
		bitwiseTest bitwiseOr
			. 20
			. /.["System.Windows.Forms"].Keys.Tab
		filterTest filter
			.
				. 1
				. 1
				. 3
				. 5
				. 2
			argument|equal
				. argument
				. 1
		findTest find
			array "hello hello hi"
			value "he"
		findTest2 find
			array "test test"
			value "test test"
		htmlTest 
			urlTest 
				decodeTest html.url.decode "x%3D%22hello%22"
		sliceTest slice
			array "alle meine entchen"
			start 5
			end 11
		firstTest first "a"
		rangeTest range 10
		reverseTest reverse "hello"
		findFirstTest findFirst
			value "hell"
			array "he hi hello"
		foreachTest foreach
			.
				x "hi"
				y "hello"
			entry|
				[entry.value] entry.key
		valuesTest values
			x "hi"
			y "hello"
		isStringTest 
			no isString 2
			yes isString "hi"
		intersectTest intersect
			.
				apple "green"
				orange "orange"
				banana "yellow"
			.
				apple "red"
				orange "yellow"
				strawberries "red"
			.
				apple "last"
				orange "green"
		lowerTest string.lower "HeLLo"
		upperTest string.upper "HeLLo"
		parseTest parse "
			asdf "hello"
			x 
				y "hello"
				z 
					a "x"
					arg|append
						. "hello "
						. arg
						. "!"
			func arg:arg
		"
	current test