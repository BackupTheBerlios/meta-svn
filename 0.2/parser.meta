integer "0123456789"
codeKeys
	parameterName "parameterName"
	root "root"
	search "search"
	lookup "lookup"
	current "current"
	scope "scope"
	literal "literal"
	function "function"
	call "call"
	callable "callable"
	argument "argument"
	select "select"
	program "program"
	key "key"
	value "value"
text|
	syntax
		autokey '.'
		callStart '('
		callEnd ')'
		root '/'
		search '$'
		negative '-'
		fraction '/'
		endOfFile 65535
		indentation 9
		unixNewLine 10
		function '|'
		string '"'
		lookupStart '['
		lookupEnd ']'
		emptyMap '0'
		call ' '
		select '.'
		character 39
		assignment ' '
		space ' '
		tab 9
		mapCurrent "current"
		integer "0123456789"
		windowsNewLine
			. 13
			. 10
		lookupStringForbidden
			. call
			. indentation
			. 13
			. 10
			. assignment
			. select
			. function
			. string
			. lookupStart
			. lookupEnd
			. emptyMap
			. search
			. root
			. callStart
			. callEnd
			. character
	number rule
		condition zeroOrMore characterSet syntax.integer
		result
			text|/.Meta.Number.Parse text
	untested "!!!!!!"
	newline alternatives
		. character syntax.unixNewLine
		. stringRule syntax.windowsNewLine
	endOfLine sequence
		. zeroOrMore alternatives
			. character syntax.space
			. character syntax.tab
		. newline
	indentation alternatives
		.
			text|if
				condition startOfFile
				then
					|
						$startOfFile 0
						result 0
						rest text
		. rule
			condition sequence
				. endOfLine
				. 
					text|nTimes
						n add
							. indentationCount
							. 1
						rule character syntax.indentation
			result
				|
					$indentationCount add
						. indentationCount
						. 1
	sameIndentation
		|nTimes
			n indentationCount
			rule character syntax.indentation
	stringLine zeroOrMore characterExcept
		. syntax.unixNewLine
		. syntax.windowsNewLine.[1]
	stringDedentation 
		rule sequence
			. endOfLine
			. |nTimes
				n subtract
					. indentationCount
					. 1
				rule character syntax.indentation
		result
			|
				$indentationCount subtract
					. indentationCount
					. 1
	characterDataExpression prePost
		pre character syntax.character
		rule characterExcept
			. syntax.character
		post character syntax.character
	string prePost
		pre syntax.string
		rule alternatives
			. oneOrMore characterExcept
				. syntax.unixNewLine
				. syntax.windowsNewLine.[1]
				. syntax.string
			. prePost
				pre indentation
				rule sequence
					. stringLine
					. zeroOrMore
						. endOfLine
						. sameIndentation
						. sequence
							. character syntax.unixNewLine
							. stringLine
				post stringDedentation
		post syntax.string
	string prePost
		pre character syntax.string
		rule zeroOrMore characterExcept
			. syntax.string
		post character syntax.string
	lookupString oneOrMore characterExcept syntax.lookupStringForbidden
	value
		text|
			rule alternatives
				. map
				. string
				. number
				. characterDataExpression
			current rule text
	lookupAnything rule
		condition sequence
			. character syntax.lookupStart
			. value
			. zeroOrMore syntax.indentation
			. character syntax.lookupEnd
		result
			arg|arg.[2]
	entry sequence
		. function
		. alternatives
			. lookupString
			. lookupAnything
		. character syntax.assignment
		. value
	dedentation rule
		condition
			|
				result 0
		result
			|
				$indentationCount subtract
					. indentationCount
					. 1
	map prePost
		pre indentation
		rule sequence
			. entry
			. oneOrMore sequence alternatives
				. sequence
					. sameIndentation
					. entry
		post dedentation
	expression
		text|
			localRule rule
				condition alternatives
					. literalExpression
				result
					arg|arg
			current localRule text
	function rule
		condition sequence
			. zeroOrMore characterExcept
				. syntax.string
				. syntax.function
				. syntax.unixNewLine
			. sequence character syntax.function
			. expression
		result
			arg|
				[codeKeys.parameterName] arg.[1]
				[codeKeys.expression] arg.[3]
	lookupAnythingExpression rule
		condition sequence
			. character syntax.lookupStart
			. expression
			. zeroOrMore character syntax.indentation
			. character syntax.lookupEnd
		result
			arg|arg.[2]
	lookupStringExpression rule
		condition lookupString
		result
			arg|
				[codeKeys.literal] arg
	search rule
		condition alternatives
			. lookupStringExpression
			. lookupAnythingExpression
		result
			arg|
				[codeKeys.search] arg
	root rule
		condition character syntax.root
		result
			arg|
				[codeKeys.root] 0
	ruleCurrent rule
		condition stringRule syntax.mapCurrent
		result
			|
				["current"] 0
	realLookup rule
		condition alternatives
			. lookupStringExpression
			. lookupAnythingExpression
		result
			arg|
				[codeKeys.lookup] arg
	lookup alternatives
		. ruleCurrent
		. realLookup
	select rule
		condition sequence
			. rule
				condition alternatives
					. root
					. search
					. lookup
				result
					arg|
						. arg
			. zeroOrMore rule
				condition sequence
					. character syntax.select
					. lookup
				result
					arg|arg.[2]
		result
			arg|join arg
	functionExpression rule
		condition function
		result
			arg|
				[codeKeys.key]
					.
						[codeKeys.lookup]
							[codeKeys.literal] codeKeys.function
				[codeKeys.value]
					[codeKeys.literal] arg
	optional
		subRule|
			text|
				subRuleResult subRule text
				current if
					condition contains
						map subRuleResult
						key "result"
					then
						|subRuleResult
					else
						|
							rest text
							result 0
	statement alternatives
		. functionExpression
		. rule
			condition sequence
				. keys
				. optional character syntax.assignment
				. expression
				. endOfLine
			result
				arg|
					[codeKeys.key] arg.[1]
					[codeKeys.value] arg.[3]
	program rule
		condition sequence
			.
				text|
					. p.defaultKeys.Push 1
					result 0
					rest text
			. sequence
				. indentation
				. rule
					condition statement
					result
						arg|
							. arg
				. zeroOrMore sequence
					. alternatives
						. sameIndentation
						. dedentation
					. statement
			. 
				text|p.defaultKeys.Pop 0
		result
			arg|
				[codeKeys.program] arg
	call rule
		condition sequence
			. select
			. alternatives
				. rule
					condition sequence
						. alternatives
							. character syntax.call
							. character syntax.indentation
						. expression
					result
						arg|arg.[2]
				. program
		result
			arg|
				[codeKeys.call] 
					[codeKeys.callable] arg.[1]
					[codeKeys.argument] arg.[2]
	whitespace zeroOrMore alternatives
		. character syntax.tab
		. character syntax.space
	emptyMap rule
		condition character syntax.emptyMap
		result
			|0
	literalExpression rule
		condition alternatives
			. emptyMap
			. string
			. number
			. characterDataExpression
		result
			arg|
				[codeKeys.literal] arg
	keysSearch sequence
		. character syntax.search
		. search
	autokeyLookup
		rule character syntax.autokey
		result
			|
				$defaultKeys push.Push
					. p.defaultKeys.Pop 0
					. 1
				current 
					[codeKeys.lookup]
						[codeKeys.literal] last defaultKeys
	makeList
		subRule|rule
			condition subRule
			result
				arg|
					. arg
	keys rule
		condition sequence
			. makeList alternatives
				. keysSearch
				. lookup
				. autokeyLookup
			. zeroOrMore rule
				condition sequence
					. character syntax.select
					. lookup
				result
					arg|arg.[2]
		result
			arg|join arg
	untested "!!!!!!"
	stringCharacter characterExcept
		. syntax.string
	testRule zeroOrMore characterExcept
		. '.'
	current /.Meta.Serialize.ValueFunction
		stringTest
			singleLine string "
				"12344321 asdfasdf"
			"
		numberTest
			integer number "483821"
		lookupStringTest
			simple lookupStringExpression "hello"
			shouldPartlyMatch lookupStringExpression "hello.hello"
		expressionTest
			stringTest expression "
				"hello"
			"
		literalTest
			stringTest literalExpression "
				"hello"
			"
			characterTest literalExpression "'a'"
			emptyMapTest literalExpression "0"
		lookupAnythingTest
			simple lookupAnythingExpression "
				["hello"]
			"
		searchTest search "hello"
		rootTest root "/"
		ruleCurrentTest 
			shouldMatch ruleCurrent "current"
			shouldNotMatch ruleCurrent "hello"
		lookupTest lookup "hello"
		selectTest
			singleTest select "hello"
			severalTest select "hello.hello"
			complexTest select "
				hello.["world"]
			"
character
	documentation "Matches one character."
	char|rule
		condition
			text|if
				condition not zero text
				then
					|if
						condition equal
							. first text
							. char
						then
							|
								result first text
								rest slice
									array text
									start 2
		result
			char|char
characterSet
	documentation "Matches one character in a set."
	chars|rule
		condition
			text|if
				condition not zero text
				then
					|if
						condition contains
							value first text
							array chars
						then
							|
								result first text
								rest slice
									array text
									start 2
						else
							|0
		result
			char|char
characterExcept
	documentation "Matches one character that is not the provided character."
	chars|rule
		condition
			text|if
				condition not zero text
				then
					|if
						condition not contains
							value first text
							array chars
						then
							|
								result first text
								rest slice
									array text
									start 2
		result
			char|char
stringRule
	documentation "Matches the provided sequence of characters."
	string|sequence apply
		array string
		function
			char|character char
oneOrMore
	documentation "Matches one or more times."
	status "untested"
	rule|
		text|
			loop zeroOrMore rule
			loopResult loop text
			current if
				condition not zero loopResult
				then
					|if
						condition not zero loopResult.result
						then
							|loopResult
zeroOrMore
	documentation "Matches zero or more times."
	rule|
		text|
			rest text
			result while
				condition
					|not zero rule rest
				function
					|
						ruleResult rule rest
						$rest ruleResult.rest
						current ruleResult.result
sequence
	documentation "Matches a sequence of rules."
	rules|
		text|
			rest text
			allMatched 1
			applied apply
				array rules
				function
					rule|
						ruleResult rule rest
						current if
							condition hasKey
								map ruleResult
								key "result"
							then
								|
									$rest ruleResult.rest
									current ruleResult.result
							else
								|
									$allMatched 0
									current 0
			current if
				condition allMatched
				then
					|
						result applied
						rest rest
prePost
	documentation "Matches a rule and throws away the results of a preceding and a following rule."
	arg|
		text|
			preResult arg.pre text
			current if
				condition not zero preResult
				then
					|
						ruleResult arg.rule preResult.rest
						current if
							condition not zero ruleResult
							then
								|
									postResult arg.post ruleResult.rest
									current if
										condition not zero postResult
										then
											|
												result ruleResult.result
												rest postResult.rest
alternatives
	documentation "Matches one of several alternative rules."
	alts|
		text|
			result 0
			rest text
			matched 0
			. apply
				array alts
				condition
					alt|
						applied alt text
						current if
							condition not zero applied
							then
								|
									$result applied.result
									$rest applied.rest
									$matched 1
									current 0
							else
								|1
				function
					|0
			current if
				condition matched
				then
					|
						result result
						rest rest
rule
	documentation "A rule returns the result in 'result' or an empty map, if the rule did not match."
	arg|
		text|
			map arg.condition text
			stuff if
				condition hasKey
					map map
					key "result"
				then
					|
						result arg.result map.result
						rest map.rest
			current stuff
