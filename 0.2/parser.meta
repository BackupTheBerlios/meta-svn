parser|
	rule
		arg|
			parser|
				map arg.condition parser
				current if
					condition succeeded map
					then
						|merge
							. parser
							. if
								condition hasKey
									map arg
									key "result"
								then
									|merge
										. map
										. arg.result merge
											. parser
											. map
								else
									|map
	charRule
		comparison|rule
			condition
				parser|if
					condition and
						.
							|not null parser.text
						. 
							|comparison first parser.text
					then
						|
							parsed first parser.text
							text rest parser.text
	character
		char|charRule
			input|equal
				. input
				. char
	characterSet
		chars|charRule
			input|contains
				array chars
				value input
	characterExcept
		chars|charRule
			input|not contains
				value input
				array chars
	stringRule
		string|sequence apply
			array string
			function
				char|character char
	zeroOrMore
		loopRule|rule
			condition
				parser|
					implementation
						p|
							matched loopRule p
							current if	
								condition succeeded matched
								then
									|
										nextMatched implementation matched
										current if
											condition succeeded nextMatched
											then
												|
													parsed join
														. 
															. matched.parsed
														. nextMatched.parsed
													text nextMatched.text
								else
									|p
					current implementation
						parsed 0
						text parser.text
	oneOrMore
		arg|rule
			condition
				parser|
					loop zeroOrMore arg
					loopResult loop
						text parser.text
					current if
						condition and
							.
								|succeeded loopResult
							.
								|not null loopResult.parsed
						then
							|loopResult
	sequence
		rules|rule
			condition
				parser|
					implementation
						arg|if
							condition hasKey
								map arg.rules
								key 1
							then
								|
									ruleResult arg.rules.[1] arg.parser
									current if
										condition succeeded ruleResult
										then
											|
												nextResult implementation
													parser
														parsed 0
														text ruleResult.text
														indentationCount 0
													rules rest arg.rules
												current if
													condition succeeded nextResult
													then
														|
															text nextResult.text
															parsed join
																.
																	. ruleResult.parsed
																. nextResult.parsed
													else
														|nextResult
							else
								|arg.parser
					current implementation
						parser parser
						rules rules
	prePost
		arg|rule
			condition sequence join
				. 
					. arg.pre
					. arg.rule
				. if
					condition hasKey
						map arg
						key "post"
					then
						|
							. arg.post
			result
				parser|
					parsed parser.parsed.[2]
	succeeded
		arg|hasKey
			map arg
			key "parsed"
	alternatives
		alts|rule
			condition
				parser|
					implementation
						arg|if
							condition not null arg
							then
								|
									altResult arg.[1] parser
									current if
										condition succeeded altResult
										then
											|
												parsed altResult.parsed
												text altResult.text
										else
											|implementation rest arg
					current implementation alts
	nTimes
		arg|rule
			condition
				parser|
					implementation
						impArg|if
							condition equal
								. impArg.n
								. 0
							then
								|impArg.parser
							else
								|
									res arg.rule impArg.parser
									current if
										condition succeeded res
										then
											|
												nextResult implementation
													parser res
													n subtract
														. impArg.n
														. 1
												current if
													condition succeeded nextResult
													then
														|
															parsed join
																. 
																	. res.parsed
																. nextResult.parsed
															text nextResult.text
															indentationCount nextResult.indentationCount
					current implementation
						parser parser
						n arg.n parser
	optional
		subRule|
			parser|merge
				.
					parsed 0
					text parser.text
				. subRule parser
	lookupForbidden characterExcept
		. ' '
		. 9
		. 13
		. 10
		. ' '
		. '.'
		. '"'
		. '['
		. ']'
		. '0'
		. '$'
		. '/'
		. 39
	number rule
		condition oneOrMore characterSet "0123456789"
		result
			parser|
				parsed /.Meta.Number.Parse parser.parsed
	newLine alternatives
		. character 10
		. sequence
			. character 13
			. character 10
	whitespace zeroOrMore characterSet
		. 9
		. ' '
	endOfLine sequence
		. whitespace
		. newLine
	indentRule
		change|rule
			condition
				parser|
					localRule nTimes
						n
							|add
								. parser.indentationCount
								. change
						rule character 9
					ruleResult localRule parser
					current ruleResult
			result
				parser|
					indentationCount add
						. parser.indentationCount
						. change
	indentation indentRule 1
	sameIndentation indentRule 0
	dedentation indentRule -1
	stringLine zeroOrMore characterExcept
		. 10
		. 13
		. '"'
	characterDataExpression prePost
		pre character 39
		rule characterExcept
			. 39
		post character 39
	string prePost
		pre character '"'
		rule alternatives
			. oneOrMore characterExcept
				. 10
				. 13
				. '"'
			. rule
				condition sequence
					. rule
						condition sequence
							. newLine
							. indentation
							. stringLine
						result
							arg|
								parsed arg.parsed.[3]
		post sequence
			. optional newLine
			. optional character '"'
	lookupString oneOrMore lookupForbidden
	value
		parser|
			rule alternatives
				. map
				. string
				. number
				. characterDataExpression
			current rule parser.text
	lookupAnything rule
		condition sequence
			. character '['
			. value
			. zeroOrMore 9
			. character ']'
		result
			arg|
				parsed arg.parsed.[2]
	entry rule
		condition sequence
			. function
			. alternatives
				. lookupString
				. lookupAnything
			. whitespace
			. value
		result
			arg|
				parsed
					[arg.parsed.[2]] arg.parsed.[4]
	makeList
		subRule|rule
			condition subRule
			result
				arg|
					parsed
						. arg.parsed
	mapCore sequence
		. makeList entry
		. oneOrMore rule
			condition sequence
				. sameIndentation
				. entry
			result
				arg|
					parsed arg.parsed.[2]
	map prePost
		pre indentation
		rule mapCore
		post dedentation
	file mapCore
	expression
		parser|
			localRule rule
				condition alternatives
					. literalExpression
			current localRule
				text parser.text
	function rule
		condition sequence
			. zeroOrMore characterExcept
				. '"'
				. ' '
				. 10
			. sequence character ' '
			. expression
		result
			arg|
				parsed
					parameter arg.parsed.[1]
					expression arg.parsed.[3]
	lookupAnythingExpression rule
		condition sequence
			. character '['
			. expression
			. zeroOrMore character 9
			. character ']'
		result
			arg|
				parsed arg.parsed.[2]
	lookupStringExpression rule
		condition lookupString
		result
			arg|
				parsed
					literal arg.parsed
	search rule
		condition alternatives
			. lookupStringExpression
			. lookupAnythingExpression
		result
			arg|
				parsed
					search arg.parsed
	root rule
		condition character '/'
		result
			arg|
				parsed
					root 0
	ruleCurrent rule
		condition stringRule "current"
		result
			|
				parsed
					["current"] 0
	realLookup rule
		condition alternatives
			. lookupStringExpression
			. lookupAnythingExpression
		result
			arg|
				parsed
					lookup arg.parsed
	lookup alternatives
		. ruleCurrent
		. realLookup
	select rule
		condition sequence
			. makeList alternatives
				. root
				. search
				. lookup
			. zeroOrMore prePost
				pre character '.'
				rule lookup
		result
			arg|
				parsed
					select join arg.parsed
	functionExpression rule
		condition function
		result
			arg|
				parsed
					key
						.
							lookup
								literal "function"
					value
						literal arg.parsed
	statement alternatives
		. functionExpression
		. rule
			condition sequence
				. keys
				. whitespace
				. expression
				. endOfLine
			result
				arg|
					parsed
						key arg.parsed.[1]
						value arg.parsed.[3]
	program rule
		condition sequence
			.
				parser|
					. "p.defaultKeys.Push 1"
					parsed 0
					text parser.text.text
			. sequence
				. indentation
				. rule
					condition statement
					result
						arg|
							parsed
								. arg.parsed
				. zeroOrMore sequence
					. alternatives
						. sameIndentation
						. dedentation
					. statement
			. 
				parser|"p.defaultKeys.Pop 0"
		result
			arg|
				parsed
					program arg.parsed.[2]
	call rule
		condition sequence
			. select
			. alternatives
				. rule
					condition sequence
						. alternatives
							. character ' '
							. character 9
						. expression
					result
						arg|
							parsed arg.parsed.[2]
				. program
		result
			arg|
				parsed
					call
						callable arg.parsed.[1]
						argument arg.parsed.[2]
	emptyMap rule
		condition character '0'
		result
			|
				parsed 0
	literalExpression rule
		condition alternatives
			. emptyMap
			. string
			. number
			. characterDataExpression
		result
			arg|
				parsed
					literal arg.parsed
	keysSearch prePost
		pre character '$'
		rule search
	autokeyLookup rule
		condition character '.'
		result
			arg|
				defaultKey add
					. arg.defaultKey
					. 1
				parsed
					lookup
						literal arg.defaultKey
	keys rule
		condition sequence
			. makeList alternatives
				. keysSearch
				. lookup
				. autokeyLookup
			. zeroOrMore prePost
				pre character '.'
				rule lookup
		result
			arg|
				parsed join arg.parsed
	current /.Meta.Serialize.ValueFunction
		stringTest
			singleLine string
				text "
					"12344321 asdfasdf"
				"
		numberTest
			integer number
				text "483821"
		lookupStringTest
			simple lookupStringExpression
				text "hello"
			shouldPartlyMatch lookupStringExpression
				text "hello.hello"
		expressionTest
			stringTest expression
				text "
					"hello"
				"
		literalTest
			stringTest literalExpression 
				text "
					"hello"
				"
			characterTest literalExpression 
				text "'a'"
			emptyMapTest literalExpression 
				text "0"
		lookupAnythingTest
			simple lookupAnythingExpression
				text "
					["hello"]
				"
		searchTest search
			text "hello"
		rootTest root
			text "/"
		ruleCurrentTest 
			shouldMatch ruleCurrent
				text "current"
			shouldNotMatch ruleCurrent
				text "hello"
		lookupTest lookup
			text "hello"
		selectTest
			singleTest select
				text "hello"
			severalTest select
				text "hello.hello"
			complexTest select
				text"
					hello.["world"]
				"
		keysSearchTest
			simple keysSearch
				text "$hello"
		keysTest
			simple keys
				text "hello.hello"
		callTest
			simple call
				text "
					hello "hi"
				"
		endOfLineTest
			unix
				shouldMatch endOfLine
					text
						. 10
				shouldNotMatch endOfLine
					text "hello"
			windows 
				shouldMatch endOfLine
					text 
						. 13
						. 10
				shouldNotMatch endOfLine
					text "hello"
		whitespaceTest
			shouldMatch whitespace
				text "					 "
			shouldNotMatch whitespace
				text "			kj	"
		indentationTest
			shouldMatch indentation
				text "	"
				indentationCount 0
		dedentationTest
			shouldMatch
				two dedentation
					text "			"
					indentationCount 2
					parsed 0
				one dedentation
					text "		"
					indentationCount 1
					parsed 0
			shouldNotMatch dedentation
				text "		"
				indentationCount 5
				parsed 0
		sameIndentationTest
			shouldMatch
				two sameIndentation
					text "			"
					indentationCount 2
				one sameIndentation
					text "		"
					indentationCount 1
			shouldNotMatch sameIndentation
				text "		"
				indentationCount 5
		stringLineTest stringLine
			text "
				hello hello hello
				hi hi
			"
		longStringTest 
			simple string
				text "
					"
						hello hello hello
					"
				"
				indentationCount 0
				parsed 0
			longer string
				text "
					"
						hello
						hello
						hello
					"
				"
				indentationCount 0
				parsed 0
