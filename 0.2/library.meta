|{
	lib=?{
		&Meta
		lib={
			Double=Library.Double_Map
			Contains=?{
				m=Map_Map(@)
				&m.ContainsKey_Map
			foreach=Library.Foreach_Map_Map
			flip=func?a?b?func(b,a
			containedBy=key?map?{
				m=Map_Map(map
				&m.ContainsKey_Map(key
			modify=Library.Modify_Map_Map
			add=Number.op_Addition_Number_Number
			Sum=Number.op_Addition_Number_Number
			raise=Library.Raise_Number_Number
			or=a?b?{
				stuff={
					1=1
					0=b
				&stuff.<a
			merge=Library.Merge_Map_Map
			sum=Library.Sum_Map_Map
			addAll=sum(add
			keys=arg?<"Map_IEnumerable`1"({
				m=Map_Object(arg
				&m.get_Keys(
			Product=Number.op_Multiply_Number_Number
			not=arg?{
				stuff={
					0=1
					1=0
				&stuff.<arg
			stringToNumber=Library.StringToNumber_Map
			SplitString=Library.SplitString_Map_Map
			parse=Parser.Parse_String
			toString=Serialization.Serialize_Map
			writeLine=?{
				Library.WriteLine_String(@
				&@
			join=Library.Join_Map_Map
			range=Library.Range_Map
			reverse=Library.Reverse_Map
			If=Library.If_Map_Map
			ElseIf=Library.ElseIf_Map_Map_Map
			filter=Library.Filter_Map_Map
			Map=Library.Map_Map_Map
			divide=Number.op_Division_Number_Number
			divideBy=flip(divide
			Quotient=Number.op_Division_Number_Number
			DifferenceFrom=Number.op_Subtraction_Number_Number
			Difference=flip(DifferenceFrom
			greater=Number.op_GreaterThan_Number_Number
			less=Number.op_LessThan_Number_Number
			greaterOrEqual=Number.op_GreaterThanOrEqual_Number_Number
			lessOrEqual=Number.op_LessThanOrEqual_Number_Number
			addArray=a?b?Map(keys(a),key?add(a.<key>,b.<key>))
			LengthVector=vector?raise(add(raise(vector.1,2),raise(vector.2,2)),1/2)
			DifferenceVector=a?b?Map(keys(a),key?Difference(a.<key>,b.<key
			maximum=a?b?{
				stuff={
					1=a
					0=b
				&stuff.<greater(a,b
			CallKey=map?key?If(Contains(map,key),?map.<key>(
			minimum=a?b?{
				stuff={
					1=a
					0=b
				&stuff.<less(a,b
			MinimumAll=sum(minimum
			bitwiseOr=Number.op_BitwiseOr_Number_Number
			and=a?b?{
				stuff={
					1=b
					0=0
				&stuff.<a
			andAll=sum(and
			integerToString=arg?{
				m=Map_Object(arg
				&m.ToString(
			count=arg?{
				m=Map_Object(arg
				&m.get_Count(
			equal=Library.Equal_Map_Map
			isNumber=arg?{
				m=Map_Object(arg
				&m.get_IsNumber(
			isString=arg?{
				m=Map_Object(arg
				&m.get_IsString(
			JoinAll=Library.JoinAll_Map
			Distance=a?b?LengthVector(DifferenceVector(a,b
			length=arg?{
				m=Map_Object(arg
				&m.get_ArrayCount(0
			mergeAll=Library.MergeAll_Map
			negate=arg?Difference(0,arg
			modulo=Number.op_Modulus_Number_Number
			DotProductVector=vector?number?Map(vector,entry?Product(number,entry
			ProductVector=a?b?Map(range(length(a)),index?Product(a.<index>,b.<index
			orAll=sum(or
			print=?writeLine(toString(@
			readLine=?mscorlib.Console.ReadLine(
			append=Library.Append_Map_Map
			appendTo=flip(append
			empty=equal(0
			prepend=array?item?join(
				[
					item
				array
			prependTo=flip(prepend
			switch=Library.Switch_Map_Map
			callIf=map?key?func?{
				which={
					stuff={
						0={
							|0
						1={
							|func(map.<key
					&stuff.<Contains(map,key
				&which(
			filterWith=flip(filter
			random=Library.Random_Int32
			discard=array?func?filter(array,?not(func(@
			mergeWith=flip(merge
			enumerableToArray=Library.EnumerableToArray_Map
			try=Library.Try_Map_Map
			ReadTextFile=file?mscorlib.File.ReadAllText_String_Encoding(
				file
				mscorlib.Encoding.get_Default(
			CompareNumber=Library.CompareNumber_Number_Number
			Sort=Library.Sort_Map_Map
			TrimString=Library.Trim_String
			WriteTextFile=file?text?mscorlib.File.WriteAllText_String_String_Encoding(
				file
				text
				mscorlib.Encoding.get_Default(
	&{
		m=lib(0)
		&m.lib