|,
	lib=,
		|,
			&=Meta
			lib=,
				Double=.
					Library
					Double_Map
				Contains=,
					arg|.
						-
							Map_Map
							arg
						ContainsKey_Map
				foreach=.
					Library
					Foreach_Map_Map
				flip=func?a?b?func b a
				containedBy=key?map?(Map_Map map).ContainsKey_Map key
				modify=Library.Modify_Map_Map
				add=Number.op_Addition_Number_Number
				raise=Library.Raise_Number_Number
				or=a?b?.
					,
						1=1
						0=b
					<a
				merge=Library.Merge_Map_Map
				sum=Library.Sum_Map_Map
				addAll=sum add
				addArray=a?b?Map
					keys a
					key?add a.<key> b.<key
				LengthVector=vector?raise (add (raise vector.1 2) (raise vector.2 2)) 1/2
				DifferenceVector=a?b?-
					Map
					keys a
					key?Difference a.<key> b.<key
				divide=Number.op_Division_Number_Number
				divideBy=flip divide
				DifferenceFrom=Number.op_Subtraction_Number_Number
				Difference=flip DifferenceFrom
				greater=Number.op_GreaterThan_Number_Number
				less=Number.op_LessThan_Number_Number
				greaterOrEqual=Number.op_GreaterThanOrEqual_Number_Number
				lessOrEqual=Number.op_LessThanOrEqual_Number_Number
				maximum=a?b?.
					,
						1=a
						0=b
					greater a b
				CallKey=map?key?If
					Contains map key
					?(map.<key
				minimum=a?b?.
					,
						1=a
						0=b
					less a b
				MinimumAll=sum minimum
				bitwiseOr=Number.op_BitwiseOr_Number_Number
				and=a?b?.
					,
						1=b
						0=0
					<a
				andAll=sum and
				integerToString=arg?((Map_Object arg).ToString
				count=arg?((Map_Object arg).get_Count
				equal=Library.Equal_Map_Map
				isNumber=arg?((Map_Object arg).get_IsNumber
				isString=arg?((Map_Object arg).get_IsString
				JoinAll=Library.JoinAll_Map
				keys=arg?<"Map_IEnumerable`1" ((Map_Object arg).get_Keys
				Distance=a?b?LengthVector (DifferenceVector a b)
				length=arg?((Map_Object arg).get_ArrayCount
				mergeAll=sum merge
				negate=arg?Difference 0 arg
				modulo=Number.op_Modulus_Number_Number
				DotProductVector=vector?number?Map vector entry?Product number entry
				ProductVector=a?b?Map (range (length a)) index?-
					Product
					a.<index
					b.<index
				Product=Number.op_Multiply_Number_Number
				not=arg?.
					,
						0=1
						1=0
					<arg
				orAll=sum or
				stringToNumber=Library.StringToNumber_Map
				print=?writeLine (toString @)
				SplitString=Library.SplitString_Map_Map
				parse=Parser.Parse_String
				toString=Serialization.Serialize_Map
				writeLine=?,
					/.mscorlib.Console.WriteLine_String @
					&=arg
				readLine=?(mscorlib.Console.ReadLine
				append=Library.Append_Map_Map
				appendTo=flip append
				empty=equal 0
				prepend=array?item?join
					+
						item
					array
				prependTo=-
					flip
					prepend
				Map=,
					array|,
						func|,
							max=-
								length
								array
							helper=,
								index|,
									result|-
										.
											,
												0=,
													|result
												1=,
													|-
														helper
														-
															add
															1
															index
														-
															append
															result
															-
																func
																.
																	array
																	<index
											-
												lessOrEqual
												index
												max
							&=-
								helper
								1
								0
				Map=.
					/
					Meta
					Library
					Map_Map_Map
				switch=.
					Library
					Switch_Map_Map
				callIf=,
					map|,
						key|,
							func|-
								.
									,
										0=,
											|0
										1=,
											|-
												func
												.
													map
													<key
									-
										Contains
										map
										key
				join=.
					Library
					Join_Map_Map
				range=.
					Library
					Range_Map
				reverse=.
					Library
					Reverse_Map
				If=.
					Library
					If_Map_Map
				ElseIf=.
					Library
					ElseIf_Map_Map_Map
				filter=.
					Library
					Filter_Map_Map
				filterWith=-
					flip
					filter
				random=.
					Library
					Random_Int32
				discard=,
					array|,
						func|-
							filter
							array
							,
								entry|-
									not
									-
										func
										entry
				mergeWith=-
					flip
					merge
				enumerableToArray=.
					Library
					EnumerableToArray_Map
				try=.
					Library
					Try_Map_Map
				ReadTextFile=,
					file|-
						.
							mscorlib
							File
							ReadAllText_String_Encoding
						file
						-
							.
								mscorlib
								Encoding
								get_Default
				CompareNumber=.
					Library
					CompareNumber_Number_Number
				Sort=.
					Library
					Sort_Map_Map
				TrimString=.
					Library
					Trim_String
				WriteTextFile=,
					file|,
						text|-
							.
								mscorlib
								File
								WriteAllText_String_String_Encoding
							file
							text
							-
								.
									mscorlib
									Encoding
									get_Default
	&=.
		-
			lib
		lib
