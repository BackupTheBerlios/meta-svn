|{
	lib=?{
		&Meta
		lib={
			double=Library.Double_MapBase
			contains=?{
				m=ObjectMap_Object(@)
				&m.ContainsKey_MapBase
			foreach=Library.Foreach_MapBase_MapBase
			flip=func?a?b?func(b a
			containedBy=key?map?{
				m=ObjectMap_Object(map
				&m.ContainsKey_MapBase(key
			modify=Library.Modify_MapBase_MapBase
			sum=Number.op_Addition_Number_Number
			power=Library.Raise_Number_Number
			or=a?b?{
				stuff={
					1=1
					0=b
				&stuff.<a
			merge=Library.Merge_MapBase_MapBase
			accumulate=Library.Sum_MapBase_MapBase
			keys=arg?<"DictionaryMap_IEnumerable`1"({
				m=ObjectMap_Object(arg
				&m.get_Keys(
			product=Number.op_Multiply_Number_Number
			not=arg?{
				stuff={
					0=1
					1=0
				&stuff.<arg
			stringToNumber=Library.StringToNumber_MapBase
			parse=Parser.Parse_String
			toString=Serialization.Serialize_MapBase
			writeLine=?{
				Library.WriteLine_String(@
				&@
			join=Library.Join_MapBase_MapBase
			range=Library.Range_Number
			reverse=Library.Reverse_MapBase
			if=Library.If_Boolean_MapBase
			ifElse=Library.ElseIf_Boolean_MapBase_MapBase
			filter=Library.Filter_MapBase_MapBase
			apply=Library.Map_MapBase_MapBase
			applyTo=flip(apply
			divide=Number.op_Division_Number_Number
			divideBy=flip(divide
			quotient=Number.op_Division_Number_Number
			difference=Number.op_Subtraction_Number_Number
			differenceFrom=flip(difference
			greater=Number.op_GreaterThan_Number_Number
			less=Number.op_LessThan_Number_Number
			greaterEqual=Number.op_GreaterThanOrEqual_Number_Number
			rest=Library.Rest_MapBase
			lessEqual=Number.op_LessThanOrEqual_Number_Number
			vectorSum=a?b?apply(keys(a) key?sum(a.<key> b.<key>
			vectorLength=vector?power(
				sum(
					power(vector.1 2
					power(vector.2 2
				1/2
			vectorDifference=a?b?apply(
				keys(a
				key?difference(a.<key> b.<key>
			length=arg?{
				m=ObjectMap_Object(arg
				&m.get_ArrayCount(0
			select=Library.Select_MapBase_MapBase
			slice=Library.Slice_MapBase_Int32_Int32
			vectorAllLess=a?b?accumulate(
				and
				apply(
					range(length(a
					index?less(a.<index> b.<index
			lessEqualArray=a?b?accumulate(
				and
				apply(
					range(length(a
					index?lessEqual(a.<index> b.<index
			maximum=a?b?{
				stuff={
					1=a
					0=b
				&stuff.<greater(a b
			callKey=map?key?if(contains(map key) ?map.<key>(
			minimum=a?b?{
				stuff={
					1=a
					0=b
				&stuff.<less(a b
			bitwiseOr=Number.op_BitwiseOr_Number_Number
			and=a?b?{
				stuff={
					1=b
					0=0
				&stuff.<a
			andAll=accumulate(and
			integerToString=arg?{
				m=ObjectMap_Object(arg
				&m.ToString(
			count=arg?{
				m=ObjectMap_Object(arg
				&m.get_Count(
			equal=Library.Equal_Object_Object
			isNumber=arg?{
				m=ObjectMap_Object(arg
				&m.get_IsNumber(
			isString=arg?{
				m=ObjectMap_Object(arg
				&m.get_IsString(
			joinAll=Library.JoinAll_MapBase
			mergeAll=Library.MergeAll_MapBase
			negate=arg?difference(0 arg
			modulo=Number.op_Modulus_Number_Number
			vectorDotProduct=vector?number?apply(vector entry?product(number entry
			productVector=a?b?apply(range(length(a)) index?product(a.<index> b.<index
			print=?{
				writeLine(toString(@
				&@
			printAll=applyTo(print
			readLine=?mscorlib.Console.ReadLine(
			append=Library.Append_MapBase_MapBase
			appendTo=flip(append
			empty=equal(0
			prepend=array?item?join(
				[
					item
				array
			prependTo=flip(prepend
			switch=Library.Switch_MapBase_MapBase
			while=Library.While_MapBase_MapBase
			callIf=map?key?func?{
				which={
					stuff={
						0={
							|0
						1={
							|func(map.<key
					&stuff.<contains(map key
				&which(
			floor=Library.Floor_Number
			filterWith=flip(filter
			random=Library.Random_Int32_Int32
			discard=array?func?filter(array ?not(func(@
			mergeWith=flip(merge
			enumerableToArray=Library.EnumerableToArray_MapBase
			try=Library.Try_MapBase_MapBase
			readTextFile=file?mscorlib.File.ReadAllText_String_Encoding(
				file
				mscorlib.Encoding.get_Default(
			compareNumber=Library.CompareNumber_Number_Number
			sort=Library.Sort_MapBase_MapBase
			writeTextFile=file?text?mscorlib.File.WriteAllText_String_String_Encoding(
				file
				text
				mscorlib.Encoding.get_Default(
	&{
		m=lib(0)
		&m.lib