"license='"
		Copyright (c) 2005 Christian Staudenmeyer
		
		Permission is hereby granted, free of charge, to any person obtaining
		a copy of this software and associated documentation files (the
		"Software"), to deal in the Software without restriction, including
		without limitation the rights to use, copy, modify, merge, publish,
		distribute, sublicense, and/or sell copies of the Software, and to
		permit persons to whom the Software is furnished to do so, subject to
		the following conditions:
		
		The above copyright notice and this permission notice shall be
		included in all copies or substantial portions of the Software.
		
		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
		NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
		BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
		ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
		CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE."'
|
	this=map.merge
		scope
		=
			"AssignedToCurrent"
	scoping=
		test=
			scopingValue="right"
			|scopingValue
	scopingValue="wrong"
	scopingTest=scoping.test
	lexicalScoping=scopingTest *
	unicodeText="äaba"
	scope.scope.testSubDir.x=*
	persistantDeleteTest=testSubDir.x
	scope.scope.testSubDir.x=
		a="b"
		x=
			x="hello"
			y="world"
	integerHashTest=
		[2]="correct hash content"
		hashTestData=
			[*]=
				[*]=*
		hashTest=[hashTestData]
	negativeInteger=100
	negativeInteger.x="hello"
	integerIncrementTest=5
	integerIncrementTest.[*]=integerIncrementTest
	integerDecrementTest=5
	integerDecrementTest=integerDecrementTest.[*]
	persistenceTest=testSubDir
	literalEscapeTest=
		"asdf"
		"asdf"
		''"as"'df"''
		'''"as"''df"'''
		'''''''''''''''''"as"''''''''''''''''df"'''''''''''''''''
	"ImpliedAutokey"
	"Autokey"
	commandLineArguments=arg
	aMap=
		a="a"
	[aMap]="Object"
	["normal symbol"]="NormalSymbol"
	lookupSymbol="LookupSymbol"
	["long key symbol"]="LookupExtendedSymbol"
	lookedUpMap=[aMap]
	lookedUpNormalSymbol=["normal symbol"]
	lookedUpSymbol=lookupSymbol
	lookedUpLongSymbol=["long key symbol"]
	object=
		a="default"
		autoSearch="default"
		b=*
		SetA=
			|
				scope.scope.a="c"
				scope.scope.autoSearch="changed"
		SetB=
			|
				scope.scope.b.[1]=arg.value
				this="changed"
		x=
			a="b"
			c="d"
		=
			|
				this.a="b"
	a="default"
	b=*
	aSet=object.SetA *
	bSet=object.SetB
		value=
			x=7
			z=1
	scopeTest="default"
	scopeFunction=
		inScope="right"
		|
			scope.scope.scopeTest=inScope
	inScope="wrong"
	scopeFunction *
	scopeFromFunctionData="right"
	scopeFunctionFunction=
		scopeFromFunctionData="wrong"
		|
			|scopeFromFunctionData
	scopeFromFunction=scopeFunctionFunction *
	scopeFromFunctionTest=scopeFromFunction *
	ReturnEverything=
		|
			this=arg
	everythingReturned=ReturnEverything
		"a"
		"b"
		"c"
	variableAsArgument=ReturnEverything
		"x"
		"y"
		"z"
	ReturnFunction=
		|
			this=
				|
					this=
						1
						2
						3
	SetCurrent=
		|
			this=
				arg=arg
				x=arg.symbol
			this=x
	thisSet=SetCurrent
		symbol="haha"
	FirstLevel=
		|
			SecondLevel arg
	SecondLevel=
		|arg
	argTest=FirstLevel
		a="z"
	TestClass=MetaTest.TestClass
	TestClass.NestedClass.field=5
	nestedClassTest=TestClass.NestedClass.field
	testClass=TestClass *
	testClass.floatValue=3
	testClass.doubleValue=4
	testClass.decimalValue=5
	TestClass.boolTest=1
	boolTest=TestClass.boolTest
	strongNameTest=[
		version="2.0.0.0"
		publicKeyToken="b77a5c561934e089"
		culture="Neutral"
		name="mscorlib"
	].Int32
	MemberTest=MetaTest.MemberTest
	memberTest=MemberTest *
	stringOverload=MemberTest.OverloadedMethod.[mscorlib.String] "hello"
	integerOverload=MemberTest.OverloadedMethod.[mscorlib.Int32] 5
	memberTestOverload=MemberTest.OverloadedMethod.[
		MetaTest.MemberTest
		mscorlib.Int32
	]
		memberTest
		3247
	memberTestOverload=MemberTest.OverloadedMethod.[
		MetaTest.MemberTest
		mscorlib.Int32
	]
		memberTest
		3247
	MemberTest.classField="a"
	memberTest.instanceField="b"
	MemberTest.ClassProperty.set memberTest.InstanceProperty.get *
	classPropertyValue=MemberTest.ClassProperty.get *
	memberTest.InstanceProperty.set MemberTest.ClassProperty.get *
	instancePropertyValue=memberTest.InstanceProperty.get *
	interceptedSymbol="/hello/"
	positionalNoConversion=MetaTest.PositionalNoConversion
		"m"
		"n"
		"o"
	positionalNoConversionConcatenated=positionalNoConversion.Concatenate
		"r"
		"s"
		"t"
	namedNoConversion=MetaTest.NamedNoConversion
		"m"
		y="n"
	namedNoConversionConcatenated=namedNoConversion.Concatenate
		c="t"
		"r"
	indexerNoConversion=MetaTest.IndexerNoConversion *
	indexerNoConversion.Item.set
		"abc"
		"hihi"
	indexerNoConversionIndexed=indexerNoConversion.Item.get "abc"
	interceptedSymbolTwo=1
	k="hello"
	xyz="w"
	literalFunction=
		|5
	literalFunctionResult=literalFunction *
	someFunction=
		|
			this="simple function this"
	callFunction=
		|someFunction
	callFunctionResult=callFunction *
	delayedFunction=
		|
			|
				x="y"
	delayedFunctionResult=delayedFunction *
	value="xyz"
	selectionFunction=
		|value
	selectionFunctionResult=selectionFunction *
	upperLevel="unchanged"
	SetUpperLevel=
		|
			scope.scope.upperLevel=arg
	ChangeUpperLevel=
		|
			SetUpperLevel "changed"
	ChangeUpperLevel *
	staticEventChanged=*
	ChangeStaticEvent=
		|
			scope.scope.staticEventChanged=arg
	TestClass.staticEvent.add
		|
			ChangeStaticEvent 1
			this=arg.[1]
	staticEvent=TestClass.staticEvent
	TestClass.TakeDelegate
		|arg.[1]
	resultFromDelegate=TestClass.GetResultFromDelegate *
	staticEventResult=TestClass.staticEvent testClass
	instanceEventChanged=*
	testClass.instanceEvent.add
		|
			scope.scope.scope.instanceEventChanged=1
			this=arg.[1]
	instanceEvent=testClass.instanceEvent
	instanceEventResult=testClass.instanceEvent 5
	one=1
	two=2
	firstIf="unchanged"
	secondIf="unchanged"
	firstIfCondition=map.equal
		1
		one
	firstIfBranches=
		=
			|"then"
		[*]=
			|"else"
	firstIf=firstIfBranches.[firstIfCondition] *
	bigNumber=50020202
	secondSwitch="unchanged"
	secondSwitchCases=
		"one"
		"two"
		"three"
	secondSwitch=secondSwitchCases.[3]
	emptyMap=*
	emptyFunction=
		|
			x="hello"
	emptyFunctionResult=emptyFunction *
	font=["System.Drawing"].Font.[
		mscorlib.String
		mscorlib.Single
	]
		"Courier New"
		10
	decimalTest=5
	fractionTest=40
	stringTest="hello"
	stringTest.[6]=stringTest.[1]
	helloh="hi"
	stringStrategyHashTest=[stringTest]
	x=
		aLongText="
						hello world!
						hello!
						"
	arrayList=mscorlib.ArrayList.[*] *
	arrayList.Add "hello"
	arrayListResult=arrayList.Item.get *
	textBox=["System.Windows.Forms"].TextBox *
	textBox.Text.set "
				Alle meine Entchen,
				schwimmen auf dem See,
				schwimmen auf dem See,
				Köpfchen in das Wasser,
				Schwaenzchen in die Hoeh."
	lines=textBox.Lines.get *
	alleMeineText=lines.GetValue.[mscorlib.Int32] 1
	form=["System.Windows.Forms"].Form *
	form.Location.set.[["System.Drawing"].Point]
		X=5
		Y=1000
	automaticConversionTest=form.Location.get.[*] *
	tabText="			hello"
	escapedText="'#'n'''t"
	whileCounter=*
	loop=
		|
			whileDecision=logic.not map.equal
				arg
				10
			whileBranches=
				=
					|loop math.add
						arg
						1
				[*]=
					|arg
			this=whileBranches.[whileDecision] arg
	whileCounter=loop 3
	returnInMap=
		|
			result=arg
	literalAsArgument=returnInMap 1
	returnFunction=
		|
			|"functionResult"
	returnArg=
		|arg
	myArg=
		|
			hello="world"
	funcReturnTest=returnArg myArg *
	documentedFunction=
		doc="This function returns #hello ."
		|"hello"
	docFunctionResult=documentedFunction *
"
