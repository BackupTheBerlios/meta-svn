license="
	Copyright (c) 2005, 2006 Christian Staudenmeyer
	
	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files (the
	"Software"), to deal in the Software without restriction, including
	without limitation the rights to use, copy, modify, merge, publish,
	distribute, sublicense, and/or sell copies of the Software, and to
	permit persons to whom the Software is furnished to do so, subject to
	the following conditions:
	
	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
shortFunc="
	{
		arg|!"
			arg
1="hello
listTest=[
	"this
	1
	"is
	"a
	[
		"long
		"list
commandLine|{
	&merge(
		0
		[
			"AssignedToCurrent
	)
	asdf="hello
	shortFunction={
		arg|!"asdf
	}
	shortFunctionTest=!"shortFunction"(
		"hello"
	)
	listTest=[
		1
		2
		3
		"hello
		asdf
	]
	counter=0
	inlineProgram={
		hello="world
		x="y
	}
	SetCounter={
		|{
			counter:@
		}
	}
	1=SetCounter(
		5
	)
	LIST=[
		0
		0
		0
	]
	scoping={
		test={
			scopingValue="right"
			arg|scopingValue
		}
	}
	scopingValue="wrong"
	scopingTest=scoping.test
	lexicalScoping=scopingTest(
		0
	)
	unicodeText="äaba"
	integerHashTest={
		2="correct hash content"
		hashTestData={
			0={
				0=0
			}
		}
		hashTest=!!"hashTestData"
	negativeInteger=100
	negativeInteger=merge(
		negativeInteger
		{
			x="hello
	integerIncrementTest=5
	integerIncrementTest={
		0=integerIncrementTest
	integerDecrementTest=5
	integerDecrementTest=!"integerDecrementTest".0
	negativeNumber=-123
	mapNumbers={
		integer={
			0=5
		negative={
			0=5
			negative=0
		fraction={
			0=5
			denominator=7
		negativeFraction={
			0=5
			negative=0
			denominator=7
	fraction=3/2
	literalEscapeTest=[
		"asdf
		"asdf
		"
			as"'df
		"
			as"''df
		"
			as"''''''''''''''''df
	2="ImpliedAutokey
	3="Autokey
	commandLineArguments=!"commandLine
	aMap={
		a="a
	"normal symbol"="NormalSymbol
	lookupSymbol="LookupSymbol
	"long key symbol"="LookupExtendedSymbol
	lookedUpNormalSymbol=!"normal symbol
	lookedUpSymbol=!"lookupSymbol
	lookedUpLongSymbol=!"long key symbol
	object={
		a="default
		autoSearch="default
		b=0
		SetA={
			arg|{
				a:"c
				autoSearch:"changed
		SetB={
			newB|{
				b:merge(
					b
					{
						1=newB.value
				&"changed
		x={
			a="b
			c="d
		1={
			arg|{
				a:"b
	a="default
	b=0
	aSet=!"object".SetA(0
	bSet=!"object".SetB(
		{
			value={
				x=7
				z=1
	scopeTest="default
	scopeFunction={
		inScope="right
		arg|{
			scopeTest:inScope
	inScope="wrong
	4=!"scopeFunction"(
	scopeFromFunctionData="wrong
	scopeFunctionFunction={
		scopeFromFunctionData="right
		arg|{
			arg|!"scopeFromFunctionData
	scopeFromFunction=!"scopeFunctionFunction"(0
	scopeFromFunctionTest=!"scopeFromFunction"(0
	ReturnEverything={
		everything|{
			&!"everything
	everythingReturned=!"ReturnEverything"(
		[
			"a
			"b
			"c
	variableAsArgument=!"ReturnEverything"(
		[
			"x
			"y
			"z
	ReturnFunction={
		arg|{
			&{
				arg|{
					&[
						1
						2
						3
	SetCurrent={
		current|{
			&{
				asdf=!"current
				x=!"current".symbol
			&!"x
	thisSet=!"SetCurrent"(
		{
			symbol="haha
	FirstLevel={
		arg|[
			!"SecondLevel"(!"arg
	SecondLevel={
		arg|!"arg
	argTest=!"FirstLevel"(
		{
			a="z
	TestClass=/.Meta.TestClass
	nestedClassTest=TestClass.NestedClass.field
	testClass=!"TestClass"(
		{
			floatValue=3
			doubleValue=4
			decimalValue=5
	TestClass=merge(
		TestClass
		{
			boolTest=1
	boolTest=TestClass.boolTest
	MemberTest=/.Meta.MemberTest
	memberTest=!"MemberTest"(
	stringOverload=MemberTest.OverloadedMethod_String(
		"hello
	integerOverload=MemberTest.OverloadedMethod_Int32(
		5
	memberTestOverload=MemberTest.OverloadedMethod_MemberTest_Int32(
		memberTest
		3247
	memberTestOverload=MemberTest.OverloadedMethod_MemberTest_Int32(
		memberTest
		3247
	MemberTest:merge(
		MemberTest
		{
			classField="a
	memberTest:merge(
		memberTest
		{
			instanceField="b
	Meta.MemberTest.set_ClassProperty_String(
		memberTest.get_InstanceProperty(
	classPropertyValue=MemberTest.get_ClassProperty(
	memberTest.set_InstanceProperty_String(
		MemberTest.get_ClassProperty(
	instancePropertyValue=memberTest.get_InstanceProperty(
	interceptedSymbol="/hello/
	positionalNoConversion=/.Meta.PositionalNoConversion_String_String_String(
		"m
		"n
		"o
	positionalNoConversionConcatenated=positionalNoConversion.Concatenate_String_String_String(
		"r
		"s
		"t
	namedNoConversion=/.Meta.NamedNoConversion_Map(
		{
			1="m
			y="n
	namedNoConversionConcatenated=namedNoConversion.Concatenate_Map(
		{
			c="t
			1="r
	indexerNoConversion=/.Meta.IndexerNoConversion(
		0
	indexerNoConversion.set_Item_String_String(
		"abc
		"hihi
	indexerNoConversionIndexed=indexerNoConversion.get_Item_String(
		"abc
	interceptedSymbolTwo=1
	k="hello
	xyz="w
	literalFunction={
		arg|5
	literalFunctionResult=!"literalFunction"(
		0
	someFunction={
		arg|{
			&"simple function this
	callFunction={
		arg|!"someFunction
	callFunctionResult=!"callFunction"(
		0
	delayedFunction={
		arg|{
			arg|{
				x="y
	delayedFunctionResult=!"delayedFunction"(
		0
	delayedFunctionDirect=!"delayedFunction"(
		0
		0
	value="xyz
	selectionFunction={
		arg|!"value
	selectionFunctionResult=!"selectionFunction"(
		0
	upperLevel="unchanged
	SetUpperLevel={
		arg|{
			upperLevel:arg
	ChangeUpperLevel={
		arg|{
			1=!"SetUpperLevel"(
				"changed
	5=!"ChangeUpperLevel"(
		0
	staticEventChanged=0
	ChangeStaticEvent={
		arg|{
			staticEventChanged:arg
	asdf="hello
	TestClass.add_staticEvent_NormalEvent(
		{
			arg|ChangeStaticEvent(
				1
	6=TestClass.TakeDelegate_TestDelegate(
		{
			arg|arg
	resultFromDelegate=TestClass.GetResultFromDelegate(
		0
	staticEventResult=TestClass.CallStaticEvent_Object(
		!"testClass
	instanceEventChanged=0
	testClass.add_instanceEvent_IntEvent(
		{
			arg|{
				instanceEventChanged:1
				&arg
	instanceEventResult=testClass.CallInstanceEvent_Object(
		5
	one=1
	two=2
	firstIf="unchanged
	secondIf="unchanged
	firstIfCondition=!"equal"(
		1
		!"one
	firstIfBranches={
		1=arg?"then
		0=arg?"else
	firstIf=firstIfBranches.<firstIfCondition>(
		0
	bigNumber=50020202
	secondSwitch="unchanged
	secondSwitchCases=[
		"one
		"two
		"three
	secondSwitch=secondSwitchCases.3
	emptyMap=0
	emptyFunction=arg?{
		x="hello
	emptyFunctionResult=!"emptyFunction"(
		0
	font=/."System.Drawing".Font_String_Single(
		"Courier New
		10
	decimalTest=5
	fractionTest=40
	stringTest="hello
	stringTest=merge(
		stringTest
		{
			5=stringTest.1
	hello="hi
	stringStrategyHashTest=!!"stringTest
	x={
		aLongText="
			hello world!
			hello!
	arrayList=/.mscorlib.ArrayList(
		0
	7=arrayList.Add_Object(
		"hello
	arrayListResult=arrayList.get_Item_Int32(
		0
	textBox=/."System.Windows.Forms".TextBox(
		0
	textBox.set_Text_String("
		Alle meine Entchen{
		schwimmen auf dem See{"
		schwimmen auf dem See{
		Köpfchen in das Wasser{
		asdf in die Hoeh.
	lines=textBox.get_Lines(
	alleMeineText=lines.GetValue_Int32(
		1
	form=/."System.Windows.Forms".Form(
	form.set_Location_Point(
		!"System.Drawing".Point_Int32_Int32(
			5
			1000
	automaticConversionTest=form.get_Location(
	tabText="			hello
	escapedText="'#'n'''t
	whileCounter=0
	loop={
		start|{
			whileDecision=!"not"(
				!"equal"(
					!"start
					10
			whileBranches={
				1={
					arg|!"loop"(
						sum(
							!"arg
							1
				0=arg?!"arg
			&whileBranches.<whileDecision>(
				start
	whileCounter=!"loop"(
		3
	returnInMap=arg?{
		result=!"arg
	literalAsArgument=!"returnInMap"(
		1
	returnFunction=arg?{
		arg|"functionResult
	returnArg={
		arg|!"arg
	myArg={
		arg|{
			hello="world
	funcReturnTest=!"returnArg"(
		!"myArg
		0
	documentedFunction={
		doc="This function returns #hello .
		arg|"hello
	docFunctionResult=!"documentedFunction"(
		0
	topLevel="default
	deep={
		map={
			test={
				arg|{
					topLevel:"changed
	8=deep.map.test(
		0
	outerFunction={
		arg|{
			innerFunction={
				arg|{
					&!"arg
			1=!"innerFunction"(
				0
	outerFunctionTest=!"outerFunction"(
		"right
	newLines="
		
		
	app=<"System.Windows.Forms">.Application
	app.set_VisualStyleState_VisualStyleState(
		!"System.Windows.Forms".VisualStyleState.ClientAreaEnabled
	enumTest=!"System.Windows.Forms".Application.get_VisualStyleState(
	oneTwoThreeHello="asdf
	copySourceData={
		x="y
		z="a
	copiedData=copySourceData
	copiedData=merge(
		copiedData
		{
			x="changed
	characterLiterals={
		a='a'
		space=' '
		tab='	'
