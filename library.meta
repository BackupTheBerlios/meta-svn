(){
	lib=(){
		&Meta;
		lib={
			flow={
				branch=Library.IfElse_Boolean_Map_Map;
				apply=Library.Apply_Map_Map;
				if=(condition)(callable)flow.branch(condition,callable,()0);
			};

			array={
				join=Library.JoinAll_Map;
				length=(arg)ObjectMap_Object(arg).get_ArrayCount(0);
			};
			
			console={
				writeLine=Library.WriteLine_String;
				print=(a)console.writeLine(rational.toString(a));
			};
			
			rational={
				add=Number.Add_Number_Number;
				floor=Meta.Library.Floor_Number;
				divide=Number.Divide_Number_Number;
				subtract=Number.Subtract_Number_Number;
				multiply=Number.Multiply_Number_Number;
				greater=Number.Greater_Number_Number;
				less=Number.Less_Number_Number;
				power=Library.Raise_Number_Number;
				maximum=(a)(b){0=b;1=a;}.<rational.less(a,b)>;
				minimum=(a)(b){0=b;1=a;}.<rational.greater(a,b)>;
				modulo=Number.Modulo_Number_Number;
				opposite=(arg)rational.subtract(0,arg);
			};
			boolean={
				or=(a)(b){0=a;1=1;}.<b>;
				and=(a)(b){1=b;0=0;}.<a>;
				not=(arg){0=1;1=0;}.<arg>;
			};
			map={
				toString=Serialization.Serialize_Map;
				merge=Library.MergeAll_Map;
				count=(arg)ObjectMap_Object(arg).get_Count();
				keys=(arg)!"DictionaryMap_IEnumerable`1"(ObjectMap_Object(arg).get_Keys());
				equal=Library.Equal_Object_Object;
			};
		};
	};
	&lib().lib;
}