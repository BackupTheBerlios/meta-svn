(){
	lib=(){
		&Meta;
		lib={
			flow={
				branch=Library.IfElse_Boolean_Map_Map;
				branchMeta=(condition)(then)(else){
					1=then;
					0=else;
				}.<condition>();
				apply=Library.Apply_Map_Map;
				if=(condition)(callable)flow.branch(condition,callable,()0);
			};

			array={
				join=Library.JoinAll_Map;
				length=(arg)Meta.ObjectMap_Object(arg).get_ArrayCount(0);
			};
			int32={
				less=Library.Int32.Less_Int32_Int32;
				greater=Library.Int32.Greater_Int32_Int32;
				lessEqual=Library.Int32.LessEqual_Int32_Int32;
				greaterEqual=Library.Int32.GreaterEqual_Int32_Int32;
				add=Library.Int32.Add_Int32_Int32;
				subtract=Library.Int32.Subtract_Int32_Int32;
				multiply=Library.Int32.Multiply_Int32_Int32;
				divide=Library.Int32.Divide_Int32_Int32;
				addUnchecked=Library.Int32.AddUnchecked_Int32_Int32;
				subtractUnchecked=Library.Int32.SubtractUnchecked_Int32_Int32;
				multiplyUnchecked=Library.Int32.MultiplyUnchecked_Int32_Int32;
			};
			int64={
				less=Library.Int64.Less_Int64_Int64;
				greater=Library.Int64.Greater_Int64_Int64;
				lessEqual=Library.Int64.LessEqual_Int64_Int64;
				greaterEqual=Library.Int64.GreaterEqual_Int64_Int64;
				add=Library.Int64.Add_Int64_Int64;
				subtract=Library.Int64.Subtract_Int64_Int64;
				multiply=Library.Int64.Multiply_Int64_Int64;
				divide=Library.Int64.Divide_Int64_Int64;
				addUnchecked=Library.Int64.AddUnchecked_Int64_Int64;
				subtractUnchecked=Library.Int64.SubtractUnchecked_Int64_Int64;
				multiplyUnchecked=Library.Int64.MultiplyUnchecked_Int64_Int64;
			};
			float32={
				less=Library.Single.Less_Single_Single;
				greater=Library.Single.Greater_Single_Single;
				lessEqual=Library.Single.LessEqual_Single_Single;
				greaterEqual=Library.Single.GreaterEqual_Single_Single;
				add=Library.Single.Add_Single_Single;
				subtract=Library.Single.Subtract_Single_Single;
				multiply=Library.Single.Multiply_Single_Single;
				divide=Library.Single.Divide_Single_Single;
			};
			float64={
				less=Library.Double.Less_Double_Double;
				greater=Library.Double.Greater_Double_Double;
				lessEqual=Library.Double.LessEqual_Double_Double;
				greaterEqual=Library.Double.GreaterEqual_Double_Double;
				add=Library.Double.Add_Double_Double;
				subtract=Library.Double.Subtract_Double_Double;
				multiply=Library.Double.Multiply_Double_Double;
				divide=Library.Double.Divide_Double_Double;
			};

			
			console={
				writeLine=Library.WriteLine_String;
				print=(a)console.writeLine(rational.toString(a));
			};
			
			rational={
				add=NumberMap.Add_NumberMap_NumberMap;
				floor=Library.Floor_NumberMap;
				divide=NumberMap.Divide_NumberMap_NumberMap;
				subtract=NumberMap.Subtract_NumberMap_NumberMap;
				multiply=NumberMap.Multiply_NumberMap_NumberMap;
				greater=NumberMap.Greater_NumberMap_NumberMap;
				less=NumberMap.SpecialLess_Map_Map;
				power=NumberMap.Raise_NumberMap_NumberMap;
				maximum=(a)(b){0=b;1=a;}.<rational.less(a,b)>;
				minimum=(a)(b){0=b;1=a;}.<rational.greater(a,b)>;
				modulo=NumberMap.Modulo_NumberMap_NumberMap;
				opposite=(arg)rational.subtract(0,arg);
			};
			boolean={
				or=(a)(b){0=a;1=1;}.<b>;
				and=(a)(b){1=b;0=0;}.<a>;
				not=(arg){0=1;1=0;}.<arg>;
			};
			map={
				toString=Serialization.Serialize_Map;
				merge=Library.MergeAll_Map;
				count=(arg)Meta.ObjectMap_Object(arg).get_Count();
				keys=(arg)Meta.<"DictionaryMap_IEnumerable`1">(Meta.ObjectMap_Object(arg).get_Keys());
				equal=Library.Equal_Object_Object;
			};
		};
	};
	&lib().lib;
}