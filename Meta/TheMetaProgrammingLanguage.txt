The Meta programming language
Version 0.1

Christian Staudenmeyer


This article is supposed to give the reader a good understanding of the design of the Meta programming language. The article is primarily targeted at experienced programmers, that have already used several programming languages. Less experienced programmers may also benefit by getting a different perspective. I claim that ease of use is the deciding, and only, factor in modern general purpose programming language design. This is achieved by reducing the mental complexity of the language. The most general abstractions are used, which makes the language both simpler and more flexible. I then explain exactly how Meta solves these problems, which abstractions it chooses, and how the different compromises and drawbacks are handled, right down to syntax decisions.

The problem and the goal
  This section 
  What's bad?
  What would be good?

The solution
  Principles
  Drawback, compromises
  Syntax  
  
Explanation
  similar to other languages, statements,
  assigns value of expression to something
  
  