The Meta programming language
Version 0.1
1.2.2005
Christian Staudenmeyer
christianstaudenmeyer@web.de


This article is supposed to give a rational for the design decision and a definition of the Meta programming language. The article is primarily targeted at more experienced programmers, that have already used several programming languages. Less experienced programmers may also benefit by getting a different perspective. In this article I claim that ease of use is the deciding factor in modern general purpose programming language design. This is achieved by reducing the mental complexity of the language. The most general abstractions are used, which makes the language both simpler and more flexible. I then explain exactly how Meta solves these problems, which abstractions it chooses, and how the different compromises and drawbacks are handled, right down to syntax decisions.

purpose: definition and design rational
target readers: experience programmers that have knowledge in several programming languages
executive summary

What is the ideal programming language
  only human side matters
    machine side becomes less important for more and more applications -> in the long run

The solution
  Basics
  Drawback, compromises
  Syntax  

  
  